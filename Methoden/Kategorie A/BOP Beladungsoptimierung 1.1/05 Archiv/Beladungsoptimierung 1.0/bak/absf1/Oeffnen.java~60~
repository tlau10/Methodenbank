package absf1;

/**
 * <p>Title: Oeffnen</p>
 * <p>Description: Hilfsklasse für das Öffnen einer Datei</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: FH Konstanz</p>
 * @author Jürgen Kambeitz
 * @version 1.0
 */

import java.io.*;
import java.util.*;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableModel;
import java.beans.XMLDecoder;

public class Oeffnen {

  //Klassenattribute
  TableModel LkwModell;
  TableModel GebindeModell;
  HauptFrame hauptFrame;

  /**
   * Konstruktor der Klasse Oeffnen. Setzen des übergebenen Parameters
   * @param hf
   */
  public Oeffnen( HauptFrame hf ) {
    hauptFrame = hf;

  }

  /**
   * Diese Methode dient zum Öffenen bereits gespeicherter Modelle. Sie erwartet einen Datei-Pfad, wo sich die zu
   * ladende Datei befindet.
   *
   * @param path - wo sich die zu öffnende Datei befindet.
   */
  public void oeffneObjekt(File path) {

    try {
      if( path != null ) {

        int rowsLKW = 0;
        int colsLKW = hauptFrame.getJTableLkw().getModel().getColumnCount();
        String[][] valuesLKW = null;
        int rowsGebinde = 0;
        int colsGebinde = hauptFrame.getJTableGebinde().getModel().
            getColumnCount();
        String[][] valuesGebinde = null;

        FileInputStream file = new FileInputStream(path);
        ObjectInputStream input = new ObjectInputStream(file);

        try {
          rowsLKW = input.readInt();
          rowsGebinde = input.readInt();
          valuesLKW = new String[rowsLKW][colsLKW];
          valuesLKW = (String[][]) input.readObject();
          valuesGebinde = new String[rowsGebinde][colsGebinde];
          valuesGebinde = (String[][]) input.readObject();
        }
        catch (ClassNotFoundException ex) {
          ex.printStackTrace();
        }
        catch (IOException ex) {
          ex.printStackTrace();
        }

        ( (DefaultTableModel) hauptFrame.getJTableLkw().getModel()).setNumRows(
            0);
        for (int i = 0; i < rowsLKW; i++) {
          ( (DefaultTableModel) hauptFrame.getJTableLkw().getModel()).addRow(new
              Object[colsLKW]);
        }

        ( (DefaultTableModel) hauptFrame.getJTableGebinde().getModel()).
            setNumRows(0);
        for (int i = 0; i < rowsGebinde; i++) {
          ( (DefaultTableModel) hauptFrame.getJTableGebinde().getModel()).
              addRow(new Object[colsGebinde]);
        }

        for (int i = 0; i < rowsLKW; i++) {
          for (int j = 0; j < colsLKW; j++) {
            hauptFrame.getJTableLkw().getModel().setValueAt(valuesLKW[i][j], i,
                j);
          }
        }

        for (int i = 0; i < rowsGebinde; i++) {
          for (int j = 0; j < colsGebinde; j++) {
            hauptFrame.getJTableGebinde().getModel().setValueAt(valuesGebinde[i][
                j], i, j);
          }
        }

        input.close();
      }
    }
    catch( IOException ex ) {
      ex.printStackTrace();
    }
  }
}