/*
 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.event.InputMethodEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableModel;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import serialize.DTOModell;
import serialize.SerializeModel;

import facade.Facade;
import gui.Menue_Modellanlegen1;

//Klasse wurde von den Studierenden erstellt
public class Modell extends javax.swing.JFrame{

	Menue_Modellanlegen1 anlegen = new Menue_Modellanlegen1();
    
    Facade facade;
    
    int knoten = 0; 

    static double[] anbieterArray;
    static double[] nachfragerArray;
    static double[][] kostenmatrix;
    
    double sumAnbieter = 0;
    double sumNachfrager = 0;

    JTable AnbieterTable;
    JTable NachfragerTable;
    JTable KostenmatrixTable;
   
    /**
     * Creates new form Modell
     */
    public Modell() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabTabellen = new javax.swing.JScrollPane();
        panelTabellen = new javax.swing.JPanel();
        anbieterTabelleSPane = new javax.swing.JScrollPane();
        nachfragerTabelleSPane = new javax.swing.JScrollPane();
        kostenTabelleSpane = new javax.swing.JScrollPane();
        tabellenButtonPane = new javax.swing.JPanel();
        weiterButtonTabellen = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tabRestriktionen = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        restriktionText = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        weiterButtonRestriktionen = new javax.swing.JButton();
        tabLoesung = new javax.swing.JScrollPane();
        loesungText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Umladeproblem - Modell"); // NOI18N

        weiterButtonTabellen.setText("Weiter und Restriktionen anzeigen");
        weiterButtonTabellen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weiterButtonTabellenActionPerformed(evt);
            }
        });

        jButton1.setText("Modell speichern");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speichernButton(evt);
            }
        });

        javax.swing.GroupLayout tabellenButtonPaneLayout = new javax.swing.GroupLayout(tabellenButtonPane);
        tabellenButtonPane.setLayout(tabellenButtonPaneLayout);
        tabellenButtonPaneLayout.setHorizontalGroup(
            tabellenButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabellenButtonPaneLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                .addComponent(weiterButtonTabellen, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        tabellenButtonPaneLayout.setVerticalGroup(
            tabellenButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabellenButtonPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabellenButtonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weiterButtonTabellen, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Anbieter:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Kosten:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Nachfrager:");

        javax.swing.GroupLayout panelTabellenLayout = new javax.swing.GroupLayout(panelTabellen);
        panelTabellen.setLayout(panelTabellenLayout);
        panelTabellenLayout.setHorizontalGroup(
            panelTabellenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabellenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabellenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTabellenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nachfragerTabelleSPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 908, Short.MAX_VALUE)
                        .addComponent(kostenTabelleSpane, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(anbieterTabelleSPane, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tabellenButtonPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        panelTabellenLayout.setVerticalGroup(
            panelTabellenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabellenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(anbieterTabelleSPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nachfragerTabelleSPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(kostenTabelleSpane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tabellenButtonPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        tabTabellen.setViewportView(panelTabellen);

        jTabbedPane1.addTab("Modell anlegen", tabTabellen);

        restriktionText.setColumns(20);
        restriktionText.setRows(5);
        jScrollPane1.setViewportView(restriktionText);

        weiterButtonRestriktionen.setText("Weiter");
        weiterButtonRestriktionen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weiterButtonRestriktionenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(weiterButtonRestriktionen, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(weiterButtonRestriktionen, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(407, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        tabRestriktionen.setViewportView(jScrollPane3);

        jTabbedPane1.addTab("Restriktionen anzeigen", tabRestriktionen);
        jTabbedPane1.setEnabledAt(1, false);

        loesungText.setColumns(20);
        loesungText.setRows(5);
        tabLoesung.setViewportView(loesungText);

        jTabbedPane1.addTab("Loesung anzeigen", tabLoesung);
        jTabbedPane1.setEnabledAt(2, false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 957, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weiterButtonTabellenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weiterButtonTabellenActionPerformed
    	double diff = 0.0;
    	
    	if(Hauptmenue.open == false){
    		 diff= tabellenAuslesn();
    	}else{
    		 diff = openTabellenAuslesn();
    	}
            
    	if(diff != 0.0){
    		JOptionPane.showMessageDialog(this, "Anbieter und Nachfragermenge ungleich! Es werden Dummyrestriktionen gebildet!");
    	}
    	
    	restriktionenAnzeigen();
        ergebnisBerechnen(anbieterArray, nachfragerArray, kostenmatrix, diff);


  
        
        
    }//GEN-LAST:event_weiterButtonTabellenActionPerformed

    private void weiterButtonRestriktionenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weiterButtonRestriktionenActionPerformed
    	loesungAnzeigen();
    }//GEN-LAST:event_weiterButtonRestriktionenActionPerformed

    private void speichernButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tabellenAuslesn();
    	String savePath = "";
        savePath = saveFile();
        if(savePath != ""){
        	SerializeModel serialize = new SerializeModel();
            DTOModell dto = new DTOModell(anbieterArray, nachfragerArray, kostenmatrix);
            serialize.marshallModell(dto, savePath);         
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane anbieterTabelleSPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea restriktionText;
    private javax.swing.JTextArea loesungText;
    public javax.swing.JScrollPane kostenTabelleSpane;
    public javax.swing.JScrollPane nachfragerTabelleSPane;
    private javax.swing.JPanel panelTabellen;
    private javax.swing.JScrollPane tabLoesung;
    private javax.swing.JScrollPane tabRestriktionen;
    private javax.swing.JScrollPane tabTabellen;
    private javax.swing.JPanel tabellenButtonPane;
    private javax.swing.JButton weiterButtonRestriktionen;
    private javax.swing.JButton weiterButtonTabellen;
    // End of variables declaration//GEN-END:variables

    public void createTabellen(int knoten){
        
        this.knoten = knoten;
        
        anbieterArray = new double[knoten];
        nachfragerArray = new double[knoten];
        kostenmatrix = new double[knoten][knoten];
        
        AnbieterTable = new JTable(1, knoten);
        NachfragerTable = new JTable(1, knoten);
        KostenmatrixTable = new JTable(knoten, knoten);
        
        AnbieterTable.getModel().addTableModelListener(new TableModelListener() {
			
			@Override
			public void tableChanged(TableModelEvent e) {
		        int row = e.getFirstRow();
		        int column = e.getColumn();
		        TableModel model = (TableModel)e.getSource();
		        Object data = (String) model.getValueAt(row, column);

		        if(!data.toString().matches("\\d+\\.?(\\d+)?")){
		        	optionPaneFalscheEingabe();
		        }
			}
		});
        NachfragerTable.getModel().addTableModelListener( new TableModelListener() {
			
			@Override
			public void tableChanged(TableModelEvent e) {
		        int row = e.getFirstRow();
		        int column = e.getColumn();
		        TableModel model = (TableModel)e.getSource();
		        Object data = (String) model.getValueAt(row, column);

		        if(!data.toString().matches("\\d+\\.?(\\d+)?")){
		        	optionPaneFalscheEingabe();
		        }	
			}
		});
        KostenmatrixTable.getModel().addTableModelListener(new TableModelListener() {
			
			@Override
			public void tableChanged(TableModelEvent e) {
		        int row = e.getFirstRow();
		        int column = e.getColumn();
		        TableModel model = (TableModel)e.getSource();
		        Object data = (String) model.getValueAt(row, column);

		        if(!data.toString().matches("(\\-)?\\d+\\.?(\\d+)?")){
		        	optionPaneFalscheEingabe();	   
		        }
			}
		});
               
        anbieterTabelleSPane.add(AnbieterTable);
        nachfragerTabelleSPane.add(NachfragerTable);
        kostenTabelleSpane.add(KostenmatrixTable);
       
        anbieterTabelleSPane.setViewportView(AnbieterTable);
        nachfragerTabelleSPane.setViewportView(NachfragerTable);
        kostenTabelleSpane.setViewportView(KostenmatrixTable);
        
        for (int i = 0; i < knoten; i++) {
            
            AnbieterTable.setValueAt("0", 0, i);            
            NachfragerTable.setValueAt("0", 0, i);
            
            for (int j = 0; j < knoten; j++) {
                KostenmatrixTable.setValueAt("0", i, j);
            }
        }
    }
    
    public void gespeicherteTabellenAnzeigen(double openAnbieterArray[], double openNachfragerArray[], double openKostenMatrix[][]){

    	AnbieterTable = new JTable(1, openKostenMatrix.length);
        NachfragerTable = new JTable(1, openKostenMatrix.length);
        KostenmatrixTable = new JTable(openKostenMatrix.length, openKostenMatrix.length);
               
        anbieterTabelleSPane.add(AnbieterTable);
        nachfragerTabelleSPane.add(NachfragerTable);
        kostenTabelleSpane.add(KostenmatrixTable);
       
        anbieterTabelleSPane.setViewportView(AnbieterTable);
        nachfragerTabelleSPane.setViewportView(NachfragerTable);
        kostenTabelleSpane.setViewportView(KostenmatrixTable);
        
        anbieterArray = openAnbieterArray;
        nachfragerArray = openNachfragerArray;
        kostenmatrix = openKostenMatrix;
        
        for (int i = 0; i < openAnbieterArray.length; i++) {
        	
            AnbieterTable.setValueAt(openAnbieterArray[i], 0, i);            
            NachfragerTable.setValueAt(openNachfragerArray[i], 0, i);
            
            for (int j = 0; j < openKostenMatrix.length; j++) {
                KostenmatrixTable.setValueAt(openKostenMatrix[i][j], i, j);
            }
        }

        this.setVisible(true);
        
    }
     
   public double tabellenAuslesn(){
       	 
	  
       	 
        double sumAnbieter = 0.0;
        double sumNachfrager = 0.0;
        
        
        
                 
        for (int i = 0; i < anbieterArray.length; i++) {
        	
        	
           anbieterArray[i] = Double.parseDouble((String) AnbieterTable.getValueAt(0, i));
           nachfragerArray[i] = Double.parseDouble((String) NachfragerTable.getValueAt(0, i));
            
            sumAnbieter += anbieterArray[i];
            sumNachfrager += nachfragerArray[i];
            
            for (int j = 0; j < anbieterArray.length; j++) {
            	
                kostenmatrix[i][j] = Double.parseDouble((String) KostenmatrixTable.getValueAt(i, j));
            }
        }
        
        double difference = sumAnbieter - sumNachfrager;
        
        return difference;
    }
   
   public double openTabellenAuslesn(){
     	 

       	 
        double sumAnbieter = 0.0;
        double sumNachfrager = 0.0;
        
        
        
                 
        for (int i = 0; i < anbieterArray.length; i++) {
        	
            anbieterArray[i] = (Double) AnbieterTable.getValueAt(0, i);
            nachfragerArray[i] =  (Double) NachfragerTable.getValueAt(0, i);
        	
           
            sumAnbieter += anbieterArray[i];
            sumNachfrager += nachfragerArray[i];
            
            for (int j = 0; j < anbieterArray.length; j++) {
            	
            	kostenmatrix[i][j] = (Double) KostenmatrixTable.getValueAt(i, j);
            	
            }
        }
        
        double difference = sumAnbieter - sumNachfrager;
        
        return difference;
    }
   
   
   public void ergebnisBerechnen(double anbieterArray[], double nachfragerArray[], double kostenmatrix[][], double difference){
	   
       facade = new Facade(anbieterArray, nachfragerArray,kostenmatrix, difference);
       
       
       String lpAnsatz = facade.createLP();
       
       restriktionText.setText(lpAnsatz);
       restriktionText.setEditable(false);

       Hauptmenue main = new Hauptmenue();
       
       if(main.checkBoxLPSolve.isSelected()){
    	   System.out.println("solver");
    	   loesungText.setText(facade.startLpSolve(lpAnsatz));
           loesungText.setEditable(false);
       }else{
    	   System.err.println("mighty");
    	   loesungText.setText(facade.startMightyLP());
       }
   }
   
	public void restriktionenAnzeigen(){
		jTabbedPane1.setEnabledAt(1, true);
		jTabbedPane1.setSelectedComponent(tabRestriktionen);
	}
	
	public void loesungAnzeigen(){
		jTabbedPane1.setEnabledAt(2, true);
		jTabbedPane1.setSelectedComponent(tabLoesung);

	}
	
	public String saveFile(){
		
		String savePath = "";
		
		JFileChooser chooser = new JFileChooser(new File("."));
		chooser.setFileFilter(new FileFilter() {
			
			@Override
			public String getDescription() {
				return "xml";
			}
			
			@Override
			public boolean accept(File f) {
				return f.isDirectory() || f.getName().endsWith("xml");
			}
		});
		
		int result = chooser.showSaveDialog(this);
		
		if(result == JFileChooser.APPROVE_OPTION){
			savePath = chooser.getSelectedFile().toString();
		}
		
		return savePath;
	}
	
	public void optionPaneFalscheEingabe(){
		JOptionPane.showMessageDialog(this, "Falsche Eingabe! Nur Zahlen (z.B. 1 oder 1.5) sind erlaubt!");
	}

}
