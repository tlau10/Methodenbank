<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
	<TITLE>lp_solve</TITLE>
</HEAD>
<body background="bg.gif">

<DL>
	<DT><p><center><font size=5><b>LP-SOLVE</b></font></center></p>
        <hr noshade size=1><br><br>
	<DT>Solve (mixed integer) linear programming problem.
	<DT><BR>
	<DT><B>SYNOPSIS</B><DT>  
            lp_solve [options] &lt; input-file &gt; output-file
	<DT><BR>
	<DT><BR>
	<DT><B>OPTIONS</B><DT>
</DL>
<UL>
	<LI>-v<BR>verbose mode. Among other things, shows all the pivots.
	<LI>-h<BR>help mode, prints the usage.
	<LI>-d<BR>debug mode, all intermediate results are printed, and the
	branch-and-bounddecisions in case of (mixed) integer problems.
	<LI>-p<BR>only functional for pure LP problems. Print the values of
	the dual variables as well in the result. They are named r_1 until
	r_XXXXX unless specified by the user.  Note that bounds (constraints
	on just one variable) are not considered real constraints, and are
	not given a row in the matrix, and are therefore not printed here.
	<LI>-b &lt;bound&gt;<BR>pecify an upper (when minimizing) or lower
	(when maximizing) limit for the value of the objective function to
	the program. Only useful for (mixed) integer problems.  If close
	enough, may speed up the calculations. The same result can be
	obtained by adding an extra constraint to the problem.
	<LI>-c<BR>When branching in MILP problems, take the ceiling of the
	selected non-integer variable first instead of the floor. This can
	influence the speed of MILP problems.
	<LI>-e &lt;value&gt;<BR>Specify the accuracy with which it is
	checked whether the value of a variable is really integer. &lt;value&gt;
	must be between 0 and 0.5. Default value is 1e-6 and should be OK
	for most applications. Of course only useful for MILP problems.
	<LI>-i<BR>Print all intermediate valid solutions. Can give you
	useful solutions even if the total run time is too long. Only useful
	for (mixed) integer problems.
	<LI>-s<BR>Both rows and columns are scaled according to the
	geometric mean of the coefficients on them before solving. This
	might improve the numerical stability of your problem.
	<LI>-I<BR>Print info after reinverting.
	<LI>-t<BR>Trace pivot selection.
	<LI>
	<LI>-mps<BR>ead from MPS file instead of lp file.
	<LI>-degen<BR>use random perturbations to reduce degeneracy, can
	increase numerical nstability.</UL>
<DL>
	<DT><BR>
	<DT><B>DESCRIPTION</B><DT>
	The linear programming problem can be formulated as: Solve A.x &gt;=
	V1, with V2.x maximal. A is a matrix, x a vector of (nonnegative)
	variables, V1 a vector called the right hand side, and V2 a vector
	specifying the objective function.
	<DT><BR>
	<DT>Any number of the variables may be specified to be of type
	integer.
	<DT><BR>
	<DT>This program solves problems of this kind. It is slightly more
	general than the above problem, in that every row of A (specifying
	one constraint) can have its own (in)equality, &lt;=, &gt;= or =.
	The result specifies values for all variables.
	<DT><BR>
	<DT>Uses a 'Simplex' algorithm and sparse matrix methods, for pure
	LP problems. If one or more of the variables is declared integer,
	the Simplex algorithm is iterated with a branch and bound algorithm,
	until the desired optimal solution is found.
	<DT><BR>
	<DT><B>&quot;INTERRUPT&quot;</B><DT>
	In order to make it possible to get useful solutions for a mixed
	integer problem which takes too long to finish completely, the
	&quot;interrupt&quot; signal (kill -INT, ^C for many people) will
	not terminate the program when it is solving a MILP problem, but
	rather print the best valid solution found so far. This feature is
	not useful and thus disabled when you are solving a pure LP problem.
	If you see all zeros, it implies that no valid solution has been
	found yet. To really terminate the program, use a different signal,
	like KILL.
	<DT><BR>
	<DT>The &quot;-i&quot; option will print all intermediate valid
	solutions.
	<DT><BR>
	<DT><B>&quot;INPUT SYNTAX&quot;</B><DT>
	The default input syntax is a set of algebraic expressions and &quot;int&quot;
	declarations in the following order:
	<DT><BR>
	<DT>&lt;objective function&gt;
	<DT>&lt;constraint&gt;+
	<DT>&lt;declaration&gt;*
	<DT><BR>
	<DT><U>where:</U></DL>
<UL>
	<LI>
	&lt;objective function&gt; is a linear combination of variables,
	ending with a semicolon, optionally preceded by &quot;max: &quot; or
	&quot;min: &quot; to indicate whether you want it to be minimized or
	maximized. The case is not important, &quot;Max:&quot; or &quot;MAX:&quot;
	will work as well. Maximization is the default.
	<LI>&lt;constraint&gt; is an optional constraint name followed by a
	colon plus a linear combination of variables and constants, followed
	by a relational operator, followed again by a linear combination of
	variables and constants, ending with a semicolon. The relational
	operator can be any of the following: <BR>&quot;&lt;&quot; &quot;&lt;=&quot;
	&quot;=&quot; &quot;&gt;&quot; &quot;&gt;=&quot;. There is no
	semantic difference between &quot;&lt;&quot; and &quot;&lt;=&quot;
	nor between &quot;&gt;&quot; and &quot;&gt;=&quot; (even for integer
	variables!).
	<LI>&lt;declaration&gt; is of the form: &quot;int&quot; &lt;var&gt;+
	&quot;;&quot; Commas are allowed between variables.</UL>
<DL>
	<DT><BR>
	<DT>So, the simplest linear problem consists of an objective
	function and constraint.
	<DT><BR>
	<DT><B>EXAMPLE</B><DT>
	The simple problem:
	<DT><BR>
	<DT>x1 &gt;= 1
	<DT>x2 &gt;= 1
	<DT>x1 + x2 &gt;= 2
	<DT><BR>
	<DT>minimize x1 + x2 (= maximize -(x1 + x2)), with x1 integer
	    can be written as follows:
	<DT><BR>
	<DT>-x1 + -x2;
	<DT>(or min: x1 + x2;)
	<DT><BR>
	<DT>x1 &gt; 1;
	<DT>x2 &gt; 1;
	<DT>x1 + x2 &gt; 2;
	<DT>int x1;
	<DT><BR>
	<DT>The correct result for (x1, x2) is of course (1, 1).
	<DT>With the -mps option, lp_solve will accept MPS as input format.
	<DT><BR>
	<DT><B>BUGS</B><DT>
	Specifying a constraint name for a bound (constraints on just single
	variables) does not have an effect: they are not stored inside
	the main matrix and are not assigned a dual variable.
	<DT><BR>
</DL>
<UL>
	<LI>The problem consists entirely of constraints on just single
	variables (so-called &quot;bounds&quot;, like x &lt; 1; ) and no
	constraint with more than 1 variable (like x + 3 y &gt; 17; ). This
	leaves lp_solve with an empty problem matrix, as bounds are not
	stored in the main matrix. No real-life examples should be of this
	form, so I am not really chasing this problem.
	<LI>Many people forget that lp_solve can only handle POSITIVE values
	for the variables. While reading MPS files it will however handle
	free or negative variables by replacing them with a variable pair
	&lt;var&gt;_neg and &lt;var&gt;_pos or -&lt;var&gt; respectively. It
	is up to the user to interpret the result of this transformation.
	<LI>Sometimes problems are numerically unstable, and the unavoidable
	rounding errors inside lp_solve will cause aborts. It is very hard
	to give general solutions to this problem, but try to keep all
	values in your problem in the order of magnitude of 1 by proper
	scaling. This is almost always better than using lp_solves built-in
	scaling (with -s). Almost parallel constraints are also not very
	good for numerical stability. Use &quot;lp_solve -v&quot; and
	observe the values of the pivots to see if there are any dangerously
	large or low numbers there.
	<LI>Building lp_solve with long doubles (see the Makefile) can help
	to increase numerical stability, but will also increase the run time
	considerably. You can consult the author as well if you encounter
	numerical problems, but please remember that it is very easy to
	formulate an infeasible LP problem, so be sure there is a solution.</UL>
<DL>
	<DT><BR>
	<DT><B>SEE ALSO</B><DT>
	The implementation of the simplex kernel was mainly based on:
	<DT>W. Orchard-Hays: &quot;Advanced Linear Programming Computing
	Techniques&quot;, McGraw-Hill 1968
	<DT>The mixed integer branch and bound part was inspired by:
	<DT>section 6.4 of &quot;An Introduction to Linear Programming and
	Game Theory&quot; by Paul R. Thie, second edition published by John
	Wiley and Sons in 1988.
	<DT>This book refers to:
	<DT>Dakin, R.J., &quot;A Tree Search Algorithm for MILP Problems&quot;,
	Comput. J., 8 (1965)
	<DT><BR>
	<DT><B>ACKNOWLEDGEMENTS</B><DT>
	The work of Jeroen Dirks made the transition from the basic version
	1.5 to the full version 2.0 possible. He contributed the procedural
	interface, a built-in MPS reader, and many fixes and enhancements to
	the code.
	<DT><BR>
	<DT><B>CONTRIBUTED BY</B><DT>
	M.R.C.M. Berkelaar
	<DT>Eindhoven University of Technology Design Automation Section
	<DT>P.O. Box 513
	<DT>NL-5600 MB Eindhoven, The Netherlands
	<DT>phone ...-31-40-473345
	<DT>E-mail: michel@es.ele.tue.nl
	<DT><BR>

	<DT><B>FTP-LINK</B><DT>
	<a href=ftp://ftp.es.ele.tue.nl/pub/lp_solve>ftp://ftp.es.ele.tue.nl/pub/lp_solve</a>
      <dt><br>

      <DT><B>STATUS</B><DT>
	Use at own risk. Bug reports are welcome, as well as success
	stories.      
</DL>
<br>
<hr noshade size=1 width="80" align="left">
<br>
</BODY>
</HTML>