unit Main;
{Unit für das Hauptfenster, IteratorMain}

interface

uses WinTypes, WinProcs, SysUtils, Classes, Graphics, Forms, Controls, Menus,
  StdCtrls, Dialogs, Buttons, Messages, ExtCtrls, Childwin, Ueber,
  IniFiles;

type
  TIteratorMain = class(TForm)
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    FileNewItem: TMenuItem;
    FileOpenItem: TMenuItem;
    Window1: TMenuItem;
    Help1: TMenuItem;
    N1: TMenuItem;
    FileExitItem: TMenuItem;
    WindowCascadeItem: TMenuItem;
    WindowTileItem: TMenuItem;
    WindowArrangeItem: TMenuItem;
    HelpAboutItem: TMenuItem;
    OpenDialog: TOpenDialog;
    WindowMinimizeItem: TMenuItem;
    SpeedPanel: TPanel;
    OpenBtn: TSpeedButton;
    NewBtn: TSpeedButton;
    SaveBtn: TSpeedButton;
    PivotBtn: TSpeedButton;
    IterierenBtn: TSpeedButton;
    OptimumBtn: TSpeedButton;
    procedure FormCreate(Sender: TObject);
    procedure FileNewItemClick(Sender: TObject);
    procedure WindowCascadeItemClick(Sender: TObject);
    procedure UpdateMenuItems(Sender: TObject);
    procedure WindowTileItemClick(Sender: TObject);
    procedure WindowArrangeItemClick(Sender: TObject);
    procedure FileCloseItemClick(Sender: TObject);
    procedure FileOpenItemClick(Sender: TObject);
    procedure FileExitItemClick(Sender: TObject);
    procedure WindowMinimizeItemClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure HelpAboutItemClick(Sender: TObject);
    procedure SaveBtnClick(Sender: TObject);
    procedure PivotBtnClick(Sender: TObject);
    procedure IterierenBtnClick(Sender: TObject);
    procedure OptimumBtnClick(Sender: TObject);
  private
    procedure CreateMDIChild(const Name: string);
    procedure ShowHint(Sender: TObject);
  public
    { Public declarations }
  end;

var
  IteratorMain: TIteratorMain;
  EXEPath : string;
  DBPath : string;

implementation


{$R *.DFM}


procedure TIteratorMain.FormCreate(Sender: TObject);
{automatisch von Delphi generiert}

 var
  IteratorIni: TIniFile;

begin
  Application.OnHint := ShowHint;
  Screen.OnActiveFormChange := UpdateMenuItems;

  (* Pfade  otw WS96/97
  EXEPath: - während der Entwicklungsphase -> Festbelegung
           -   "     der Laufzeit -> akt. Pfad (bloß wia goath des ???)
  DBPath:  wird der Inidatei (im EXEPath abgelegt) entnommen
  *)

  (* Pfad der ausführbaren Datei, in der Entwicklungsphase und    *)
  (* während der Laufzeit:                                        *)
  (* -> somit wird nur eine Inidatei (..) benötigt                *)
  {EXEPath := 'c:\or\or-mbank\iterator\exec\'; }
  EXEPath := ExtractFilePath(Application.ExeName);

  (* Datenpfad                                                    *)
  IteratorIni := TIniFile.Create(EXEPath + 'iterator.ini');
  DBPath := IteratorIni.ReadString('ITERATOR', 'DBPath', 'ERROR');
  IteratorIni.free;

  { messagedlg(DBPath,mtInformation,[mbOK],0); }

  (*
  Dez. 96:
  ..der EXEPath und der DBPath werden noch nicht verwendet. Statt
  dessen wird der Datenpfad (DBPath) zum Öffnen u. Speichern durch
  folgendes Konstrukt angewählt: -> OpenDialog.InitialDir := '..\daten'.
  Somit ist auch (noch) keine Inidatei notwendig !

  Jan. 97:
  ..jetzt schon
  *)

end;

procedure TIteratorMain.ShowHint(Sender: TObject);
{automatisch von Delphi generiert}
begin
end;

procedure TIteratorMain.CreateMDIChild(const Name: string);
{automatisch von Delphi generiert}
var
  Child: TIteratorChild;
begin
  { create a new MDI child window }
  Child := TIteratorChild.Create(Application);
  Child.Caption := Name;
end;

procedure TIteratorMain.FileNewItemClick(Sender: TObject);
begin
  CreateMDIChild('Tableau ' + IntToStr(MDIChildCount + 1));
end;

procedure TIteratorMain.FileOpenItemClick(Sender: TObject);
{erzeugt eine neue Instanz und öffnet selektierte Datei}
var z,s    : word;
    Child  : TIteratorChild;
    f      : TextFile;
    Temp_String    : string;
begin
   (* OpenDialog.InitialDir := '..\daten';   ..erste Version: gut & billig *)
   OpenDialog.InitialDir := "C:\Methodenbank\Solver\Interaktive Solver\Iterator\Iterator 1.0\01 Programm\DATEN";        (* Verzeichnis setzen *)
   if OpenDialog.Execute then
      begin
      Child:=TIteratorChild.Create(Application);
      Child.Caption:=OpenDialog.Filename;
      AssignFile(F, OpenDialog.FileName);
      Reset(F);
      readln(F,Temp_String);
      Child.Anzahl_Zeilen.Text:=Temp_String;
      readln(F,Temp_String);
      Child.Anzahl_Spalten.Text:=Temp_String;
      Child.Matrix_anpassen(Application);
      for z:=1 to Child.Matrix.RowCount-1 do
        for s:=1 to Child.Matrix.ColCount-1 do
           begin
           if not EoF(F) then
              begin
              readln(F,Temp_String);
              Child.Matrix.Cells[s,z]:=Temp_String;
              end;
           end;
      CloseFile(F);
      end;
end;

procedure TIteratorMain.FileCloseItemClick(Sender: TObject);
{automatisch von Delphi generiert}
begin
  if ActiveMDIChild <> nil then
    ActiveMDIChild.Close;
end;


procedure TIteratorMain.FileExitItemClick(Sender: TObject);
{automatisch von Delphi generiert}
begin
  Close;
end;


procedure TIteratorMain.WindowCascadeItemClick(Sender: TObject);
{automatisch von Delphi generiert}
begin
  Cascade;
end;

procedure TIteratorMain.WindowTileItemClick(Sender: TObject);
{automatisch von Delphi generiert}
begin
  Tile;
end;

procedure TIteratorMain.WindowArrangeItemClick(Sender: TObject);
{automatisch von Delphi generiert}
begin
  ArrangeIcons;
end;

procedure TIteratorMain.WindowMinimizeItemClick(Sender: TObject);
{automatisch von Delphi generiert}
var
  I: Integer;
begin
  { Must be done backwards through the MDIChildren array }
  for I := MDIChildCount - 1 downto 0 do
    MDIChildren[I].WindowState := wsMinimized;
end;

procedure TIteratorMain.UpdateMenuItems(Sender: TObject);
{automatisch von Delphi generiert.
Verschiedene Buttons und Menüpunkte können nur verwendet werden, wenn
mindestens eine Child-Instanz geöffnet ist.}
begin
  WindowCascadeItem.Enabled := MDIChildCount > 0;
  WindowTileItem.Enabled := MDIChildCount > 0;
  WindowArrangeItem.Enabled := MDIChildCount > 0;
  WindowMinimizeItem.Enabled := MDIChildCount > 0;
  SaveBtn.Enabled := MDIChildCount > 0;
  PivotBtn.Enabled := MDIChildCount > 0;
  IterierenBtn.Enabled := MDIChildCount > 0;
  OptimumBtn.Enabled := MDIChildCount > 0;
end;

procedure TIteratorMain.FormDestroy(Sender: TObject);
{automatisch von Delphi generiert}
begin
  Screen.OnActiveFormChange := nil;
end;

procedure TIteratorMain.HelpAboutItemClick(Sender: TObject);
{öffnet Aboutbox}
begin
   AboutBox.ShowModal;
end;


procedure TIteratorMain.SaveBtnClick(Sender: TObject);
{Ruft die Methode des aktiven Kindfensters auf}
begin
   (ActiveMDIChild as TIteratorChild).SpeichernMnuClick(Sender);
end;

procedure TIteratorMain.PivotBtnClick(Sender: TObject);
{Ruft die Methode des aktiven Kindfensters auf }
begin
   (ActiveMDIChild as TIteratorChild).PivotClick(Sender);
end;

procedure TIteratorMain.IterierenBtnClick(Sender: TObject);
{Ruft die Methode des aktiven Kindfensters auf }
begin
   (ActiveMDIChild as TIteratorChild).IterierenMnuClick(Sender);
end;

procedure TIteratorMain.OptimumBtnClick(Sender: TObject);
{Ruft die Methode des aktiven Kindfensters auf }
begin
   (ActiveMDIChild as TIteratorChild).OptimumMnuClick(Sender);
end;

end.
