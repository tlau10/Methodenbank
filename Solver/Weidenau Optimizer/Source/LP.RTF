{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fnil\fcharset2\fprq2 Marlett;}{\f15\fmodern\fcharset0\fprq1 Lucida Console;}
{\f16\fswiss\fcharset0\fprq2 Tahoma;}{\f17\fnil\fcharset2\fprq2 Wingdings;}{\f18\fswiss\fcharset0\fprq2 Arial Black;}{\f19\fscript\fcharset0\fprq2 Comic Sans MS;}{\f20\fswiss\fcharset0\fprq2 Impact;}{\f21\fswiss\fcharset0\fprq2 Verdana;}
{\f22\froman\fcharset2\fprq2 Webdings;}{\f23\froman\fcharset2\fprq2 MT Extra;}{\f24\fswiss\fcharset0\fprq2 Arial Narrow;}{\f25\froman\fcharset0\fprq2 Book Antiqua;}{\f26\froman\fcharset0\fprq2 Bookman Old Style;}
{\f27\froman\fcharset0\fprq2 Century Schoolbook;}{\f28\fnil\fcharset2\fprq2 Monotype Sorts;}{\f29\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f30\froman\fcharset0\fprq2 Garamond;}{\f31\fmodern\fcharset2\fprq1 MS LineDraw;}
{\f32\fmodern\fcharset255\fprq2 Modern;}{\f33\fswiss\fcharset0\fprq1 MS Dialog;}{\f34\fmodern\fcharset0\fprq1 LinePrinter;}{\f35\froman\fcharset0\fprq2 CG Times;}{\f36\fswiss\fcharset0\fprq2 Univers;}{\f37\fswiss\fcharset0\fprq2 Century Gothic;}
{\f38\fdecor\fcharset0\fprq2 Algerian;}{\f39\fdecor\fcharset0\fprq2 Braggadocio;}{\f40\fswiss\fcharset0\fprq2 Britannic Bold;}{\f41\fscript\fcharset0\fprq2 Brush Script MT;}{\f42\fdecor\fcharset0\fprq2 Colonna MT;}{\f43\fdecor\fcharset0\fprq2 Desdemona;}
{\f44\froman\fcharset0\fprq2 Footlight MT Light;}{\f45\fdecor\fcharset0\fprq2 Kino MT;}{\f46\froman\fcharset0\fprq2 Wide Latin;}{\f47\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f48\fdecor\fcharset0\fprq2 Playbill;}
{\f49\fnil\fcharset0\fprq2 Mini Pics Art Jam;}{\f50\fnil\fcharset0\fprq2 Mini Pics Classic;}{\f51\fnil\fcharset0\fprq2 Mini Pics Lil Critters;}{\f52\fnil\fcharset0\fprq2 Mini Pics Lil Edibles;}{\f53\fnil\fcharset0\fprq2 Mini Pics Lil Events;}
{\f54\fnil\fcharset0\fprq2 Mini Pics Lil Stuff;}{\f55\fnil\fcharset0\fprq2 Mini Pics Lil Vehicles;}{\f56\fnil\fcharset0\fprq2 Mini Pics Red Rock;}{\f57\fnil\fcharset0\fprq2 Arriba Arriba LET;}{\f58\fnil\fcharset0\fprq2 Bang LET;}
{\f59\froman\fcharset0\fprq2 Belwe Bd BT;}{\f60\fdecor\fcharset0\fprq2 BernhardFashion BT;}{\f61\fnil\fcharset0\fprq2 Boink LET;}{\f62\froman\fcharset0\fprq2 BookmanITC Lt BT;}{\f63\fdecor\fcharset0\fprq2 Broadway BT;}
{\f64\fscript\fcharset0\fprq2 BrushScript BT;}{\f65\froman\fcharset0\fprq2 CentSchbook BT;}{\f66\fscript\fcharset0\fprq2 CommercialScript BT;}{\f67\fswiss\fcharset0\fprq2 Compacta Blk BT;}{\f68\fswiss\fcharset0\fprq2 Compacta Lt BT;}
{\f69\froman\fcharset0\fprq2 Cooper Md BT;}{\f70\fswiss\fcharset0\fprq2 CopprplGoth BT;}{\f71\froman\fcharset0\fprq2 Dauphin;}{\f72\fscript\fcharset0\fprq2 DomBold BT;}{\f73\fscript\fcharset0\fprq2 DomCasual BT;}{\f74\fswiss\fcharset0\fprq2 Eras Bd BT;}
{\f75\fdecor\fcharset0\fprq2 FlamencoD;}{\f76\fswiss\fcharset0\fprq2 FrnkGothITC Hv BT;}{\f77\fnil\fcharset0\fprq2 Freestyle Script;}{\f78\fswiss\fcharset0\fprq2 Futura Bk BT;}{\f79\fswiss\fcharset0\fprq2 Futura XBlk BT;}
{\f80\fswiss\fcharset0\fprq2 Futura XBlkCn BT;}{\f81\fswiss\fcharset0\fprq2 Futura MdCn BT;}{\f82\fswiss\fcharset0\fprq2 Humanst521 Cn BT;}{\f83\fdecor\fcharset0\fprq2 IceAgeD;}{\f84\fnil\fcharset0\fprq2 Jazz LET;}{\f85\fscript\fcharset0\fprq2 Kids;}
{\f86\fnil\fcharset0\fprq2 Lithograph;}{\f87\fswiss\fcharset0\fprq2 MicrogrammaDBolExt;}{\f88\froman\fcharset0\fprq2 NewBskvll BT;}{\f89\fscript\fcharset0\fprq2 Nuptial BT;}{\f90\fnil\fcharset0\fprq2 Papyrus LET;}{\f91\fnil\fcharset0\fprq2 Ruach LET;}
{\f92\fnil\fcharset0\fprq2 Scruff LET;}{\f93\fscript\fcharset0\fprq2 ShelleyAllegro BT;}{\f94\fscript\fcharset0\fprq2 ShelleyVolante BT;}{\f95\fswiss\fcharset0\fprq2 Swis721 BT;}{\f96\fswiss\fcharset0\fprq2 Swis721 LtCn BT;}
{\f97\fscript\fcharset0\fprq2 Technical;}{\f98\fswiss\fcharset0\fprq2 VAGRounded BT;}{\f99\fscript\fcharset0\fprq2 Van Dijk;}{\f100\fscript\fcharset0\fprq2 VivaldiD;}{\f101\fswiss\fcharset0\fprq2 Zurich Blk BT;}{\f102\fnil\fcharset2\fprq2 Animals 1;}
{\f103\fnil\fcharset2\fprq2 DF Calligraphic Ornaments LET;}{\f104\fnil\fcharset2\fprq2 DF Diversions LET;}{\f105\fnil\fcharset2\fprq2 DF Diversities LET;}{\f106\fswiss\fcharset2\fprq2 Festive;}{\f107\fswiss\fcharset0\fprq2 Univers Condensed;}
{\f108\fswiss\fcharset0\fprq2 Antique Olive;}{\f109\fswiss\fcharset0\fprq2 CG Omega;}{\f110\fswiss\fcharset0\fprq2 Albertus Medium;}{\f111\fswiss\fcharset0\fprq2 Albertus Extra Bold;}{\f112\froman\fcharset0\fprq2 Clarendon Condensed;}
{\f113\fscript\fcharset0\fprq2 Coronet;}{\f114\fmodern\fcharset0\fprq1 Letter Gothic;}{\f115\fscript\fcharset0\fprq2 Marigold;}{\f116\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f117\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}
{\f118\froman\fcharset0\fprq2 Map Symbols;}{\f119\fmodern\fcharset2\fprq1 SAPDings;}{\f120\froman\fcharset255\fprq2 Roman;}{\f121\fscript\fcharset255\fprq2 Script;}{\f122\froman\fcharset0\fprq0 c;}{\f123\froman\fcharset0\fprq0 K;}
{\f124\froman\fcharset0\fprq0 KI;}{\f125\froman\fcharset0\fprq0 I;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar \f4\fs20\lang2057 \snext0 Normal;}{\*\cs10 
\additive Default Paragraph Font;}{\s15\widctlpar \f4\fs20\lang2057 \sbasedon0\snext15 footnote text;}{\*\cs16 \additive\super \sbasedon10 footnote reference;}{\s17\widctlpar \f4\fs20\lang2057 \sbasedon0\snext17 endnote text;}{\*\cs18 \additive\super 
\sbasedon10 endnote reference;}{\s19\widctlpar\tqc\tx4153\tqr\tx8306 \f4\fs20\lang2057 \sbasedon0\snext19 header;}{\s20\widctlpar\tqc\tx4153\tqr\tx8306 \f4\fs20\lang2057 \sbasedon0\snext20 footer;}}{\info{\author Markus Weidenauer}
{\operator Markus Weidenauer}{\creatim\yr1998\mo4\dy16\hr9\min2}{\revtim\yr2000\mo8\dy8\hr20\min52}{\version2}{\edmins1}{\nofpages49}{\nofwords6439}{\nofchars36706}{\*\company Privat}{\vern57443}}\paperw11906\paperh16838 
\widowctrl\enddoc\aenddoc\hyphcaps0\formshade \fet1\sectd \linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \widctlpar \f4\fs20\lang2057 
{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}main}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Main Page}K{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {
\cs18\super K}Main Page}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}1}}{\f11 Help for program LP.EXE                 Markus Weidenauer
\par                                                  30.06.1999
\par 
\par                           LL      PPPPPPP
\par                           LL      PPPPPPPP
\par                           LL      PP    PP
\par                           LL      PP    PP
\par                           LL      PP    PP
\par                           LL      PPPPPPP
\par                           LL      PP
\par                           LL      PP
\par                           LL      PP
\par                           LLLLLLL PP
\par                           LLLLLLL PP
\par 
\par I present an optimiser which can solve LP, Integer and Mixed-Integer problems. Maximisation and minimisation is possible.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}limits}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Limits}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Limits}}{\f11  }{\cs18\f11\super n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}2}}{\f11 LIMITS
\par As variablename is the convention the programming languages:
\par 1. Letter is from ['A'..'Z','a'..'z','_'], the following characters are any of ['A'..'Z','a'..'z','_','0'..'9']
\par The length of a name is limited to 25 chars.
\par 
\par Maximal matrix size:
\par 
\par DOS Version:
\par depending on available Memory about 500 rows * 1500 Col
\par 
\par DOS-DPMI
\par nrow+ncol < 16382 (2^14-1)
\par nrow      < 6000 ROWS (incl. OBJF).
\par 
\par These limits are only the limits of the used }{\strike\f11 Compiler}{\v\f11 compiler}{\f11  (64K per array).
\par 
\par For a column I use a pointer (4 Bytes).
\par Internally rows and columns are treated identically. That is the reason for the 1. limit (nrow+ncol)
\par The second limit arises from the compact storage of vectors:
\par For a single matrix entry I need 10 bytes:
\par     2 byte to define the row
\par     8 bytes to store the coefficient
\par 
\par The WIN-32 version was compiled with Inprise Delphi 4.
\par It should solve problems of any size (limited only by avalable memory.
\par }\page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}iteration}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Iteration}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}iteration;Keyboard}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}5}}{\f11 ITERATION
\par An iteration is completely determined by two items:
\par The vector entering the basis and the vector leaving the basis. Normally with a "good" basisexchange an improvement of the objective function is linked with the exception that this is only valid if you are already feasible. As long as you are
 still infeasible the OBJF may get worse. But during this operation the sum of infeasibilities should decrease. Also the number of infeasibilities should get smaller. After reaching feasibility the OBJF should improve with every iteration, but it may happ
en that the OBJF remains equal due to cycling or degeneracy.
\par 
\par }{\b\f11 Keyboard}{\f11  command allowed during optimisation:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\f11 ESC}{\f11 :
\par {\pntext\pard\plain\f11\fs20 1.\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\f11 LP:  Stops Iteration
\par {\pntext\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 The Iteration can be continued without regret.
\par {\pntext\pard\plain\f11\fs20 2.\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\f11 MIP: Ask for Interruption
\par {\pntext\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlcont\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 The search tree will be cut and all information about searched nodes is lost. The best found solution is kept in memory.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\f11 d,D}{\f11  Toggle the parameter 'ITERLOG' between 0, 1 and 10000
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 -}{\f11    The parameter npricing is divided by 2 pricing=max(1,npricing DIV 2)
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 +}{\f11    The parameter npricing is multiplied by 2 npricing=min(32000,npricing * 2)
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 e,E}{\f11  Pop up the edit }{\strike\f11 parameter window}{\v\f11 parameter}{\f11 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 m,M}{\f11  During integer search show the next 100 waiting nodes with their }{\strike\f11 objective function}{\v\f11 objf}{\f11 . This graph is displayed for at most 10 s or until the next keyboard hit.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 n,N}{\f11  During integer search show the next 16000 waiting nodes with their objective function. This graph is displayed for at most 10 s or until the next keyboard hit.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 o,O}{\f11  During integer search show the all waiting nodes with their objective function. This graph is displayed for at most 10 s or until the next keyboard hit.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 s,S}{\f11  During Integer search all waiting nodes are saved in a }{\strike\f11 file}{\v\f11 binary-file}{\f11  for later restart of optimization without regret.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 t,T}{\f11  Toggle the }{\strike\f11 Epsilon Perturbation}{\v\f11 epsilon-perturbation}{\f11 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 w,W}{\f11  IF in integer mode then reduce the maximal number of in memory stored nodes by 100
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 x,X}{\f11  In integer mode then increase the maximal number of in memory stored nodes by 100
\par }\pard \widctlpar {\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}menu}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Menu-Structure}K{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Menu}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}6}}{\f11 MENU
\par After programstart you see a menu which reacts on cursorkeys, highlighted character or mouseclick
\par 
\par OBJECTIVE
\par  MAXIMISE\tab \tab \tab set direction to maximisation
\par  MINIMISE\tab \tab \tab set direction to minimisation
\par  SELECT OBJF\tab \tab select the }{\strike\f11 OBJF}{\v\f11 objf}{\f11  from the set of N-ROWS
\par  CRASH\tab \tab \tab build a }{\strike\f11 crash}{\v\f11 crash}{\f11  }{\strike\f11 basis}{\v\f11 basis}{\f11  from all
\par }\pard \fi720\li2160\widctlpar {\f11 vectors
\par }\pard \widctlpar {\f11  PROBLEM\tab \tab \tab define }{\strike\f11 OBJF}{\v\f11 objf}{\f11  }{\strike\f11 RHS}{\v\f11 rhs}{\f11  }{\strike\f11 BOUND}{\v\f11 bounds}{\f11  }{\strike\f11 RANGE}{\v\f124 ranges}{\f11 
\par NEW\tab \tab \tab \tab remove problem from memory
\par LOAD
\par  LP\tab \tab \tab \tab read lp-problem in }{\strike\f11 row-wise formulation}{\v\f11 row-wise-in}{\f11 
\par  MPSX\tab \tab \tab \tab read lp-problem in }{\strike\f11 MPSX-format}{\v\f11 mpsx-format-in}{\f11 
\par  MPSX FORMATTED\tab \tab read }{\strike\f11 formatted-MPSX-format}{\v\f11 mpsx-formatted-in}{\f11 
\par }\pard \li2880\widctlpar {\f11 lp-problem in, variables may contain spaces but length of names is then restricted to 8 chars
\par }\pard \widctlpar {\f11  BASIS\tab \tab \tab read a }{\strike\f11 basis}{\v\f11 basis}{\f11 
\par TREE\tab \tab \tab \tab read integer search tree of a previous saved
\par }\pard \li2880\widctlpar {\f11 run. The required files are created during integer-search and stored with the }{\strike\f11 's'-command}{\v\f11 iteration}{\f11  from the keyboard.
\par }\pard \widctlpar {\f11 SAVE
\par  BASIS\tab \tab \tab save basis to disk
\par  SOLUTION\tab \tab \tab save }{\strike\f11 continuos solution}{\v\f11 solution-file-example}{\f11  to disk
\par  INTEGER-SOLUTION\tab \tab save }{\strike\f11 integer solution}{\v\f11 integer-solution-file-example}{\f11  to disk
\par  LP\tab \tab \tab \tab save problem in }{\strike\f11 Row-wise-format}{\v\f11 row-wise-in}{\f11 
\par  MPSX\tab \tab \tab \tab save problem in }{\strike\f11 MPSX-format}{\v\f11 mpsx-format-in}{\f11 
\par GO\tab \tab \tab \tab \tab }{\strike\f11 Start LP-Solution}{\v\f11 iteration}{\f11 
\par INTEGER OPTIMISATION\tab start optimisation with above defined
\par }\pard \fi720\li2160\widctlpar {\f11 direction
\par }\pard \widctlpar {\f11 OTHER
\par  INVERT\tab \tab \tab force an }{\strike\f11 inversion}{\v\f11 inversion}{\f11  (only for test
\par }\pard \fi720\li2160\widctlpar {\f11 purpose)
\par }\pard \widctlpar {\f11  TOGGLE EPSILON\tab \tab introduce }{\strike\f11 eps-perturbation}{\v\f11 epsilon-perturbation}{\f11  or remove it
\par 
\par FAHNE\tab \tab \tab \tab write a flag of the matrix and show, where
\par }\pard \li2880\widctlpar {\f11 are entries
\par }\pard \widctlpar {\f11  DUMP MATRIX\tab \tab write the matrix to a graphic screen and put
\par }\pard \li2880\widctlpar {\f11 a pixel at the screen, where you a non zero entry
\par }\pard \widctlpar {\f11  STATUS\tab \tab \tab Write the status of the optimisation,
\par }\pard \fi720\li2160\widctlpar {\f11 feasible or not, OBJF
\par }\pard \widctlpar {\f11  MISCHEN\tab \tab \tab mix the columns (for test purpose only)
\par  BASIS OUT OF SLACKS AND ARTIFICIALS 
\par }\pard \li2880\widctlpar {\f11 create a basis without structural vectors
\par }\pard \widctlpar {\f11 EDIT
\par  VECTOR\tab \tab \tab you can enter a vector and get a screen with
\par }\pard \li2880\widctlpar {\f11 description and you can browse through the matrix
\par }\pard \widctlpar {\f11  PARAMETER\tab \tab \tab edit some }{\strike\f11 parameters}{\v\f11 parameter}{\f11 
\par  INFEASIBLE VECTORS\tab show all }{\strike\f11 infeasible vectors}{\v\f11 infeasibility}{\f11  with
\par }\pard \fi720\li2160\widctlpar {\f11 the bounds and the actual value
\par }\pard \widctlpar {\f11  DEMYSTIFIED SOLUTION\tab produce an output in which all entries are
\par }\pard \fi720\li2160\widctlpar {\f11 listed with its actual values
\par }\pard \widctlpar {\f11 COMMAND FILE\tab \tab process a }{\strike\f11 command}{\v\f11 command}{\f11  file
\par RESET PROBLEM
\par HELP\tab \tab \tab \tab this screen
\par EXIT
\par }\page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}solution-file-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $} Example of Solution File}K{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Example of Solution File}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}7}}{\f11 Example of a continuous solution (Extension *.LOS)
\par 
\par }{\f11\fs12 OPTIMAL SOLUTION
\par Weidenauer Optimiser Ver. 2.0          09.02.1995
\par 
\par Section 1 - ROWS
\par 
\par ...ROW..    AT  ...ACTIVITY...  SLACK ACTIVITY  ..LOWER LIMIT.  ..UPPER LIMIT.  .DUAL ACTIVITY
\par 
\par OBJF        BS       279.55067      -279.55067            NONE            NONE         1.00000
\par CFXR        BS        29.36403         5.63597                        35.00000
\par CRNU        BS       176.26714        23.73286                       200.00000
\par FOXR        BS        96.29165        18.70835                       115.00000
\par NASU        BS        -1.83525         1.83525                         0.00000
\par VNSU        BS        -2.77621         2.77621                         0.00000
\par OBJF        $$      -279.55067            NONE            NONE
\par IDXR        UL        46.00000         0.00000            NONE        46.00000        -6.07719
\par VRSU        UL                                            NONE                       -49.67337
\par VGSU        UL                                            NONE                      -100.16730
\par GOSU        UL                                            NONE                      -103.23243
\par IREP        EQ         0.00000         0.00000         0.00000         0.00000  10000000.00000
\par VIGA        UL                                            NONE                        -1.61322
\par FREP        EQ         0.00000         0.00000         0.00000         0.00000  10000000.00000
\par TOSU        UL                                            NONE                      -705.88235
\par OHSU        UL                                            NONE                      -140.97647
\par SRSU        UL                                            NONE                       -52.80212
\par NAGA        UL                                            NONE                       -17.64706
\par CREP        EQ         0.00000         0.00000         0.00000         0.00000  10000000.00000
\par LRSU        UL                                            NONE                       -62.48362
\par SUGA        UL                                            NONE                       -14.36538
\par FDSU        UL                                            NONE                       -73.06513
\par 
\par Section 2 - COLUMNS
\par 
\par .COLUMNS    AT  ...ACTIVITY...  ..INPUT COST..  ..LOWER LIMIT.  ..UPPER LIMIT.  .REDUCED COST.
\par 
\par CFMA        BS        29.36403       150.00000                            NONE
\par FDFO        BS        39.69870                                       200.00000
\par FOMA        BS        96.29165        70.00000                       200.00000
\par SGID        BS        39.42857                                            NONE
\par IDMA        BS        46.00000       105.00000                            NONE
\par HVU         BS        92.54025        -0.45000                       200.00000
\par DIST        BS       176.26714       -88.52000                       200.00000
\par NACF        BS        23.12417                                            NONE
\par SGFO        BS        13.09904                                       200.00000
\par SPLT        BS        31.19928        -0.20000                            NONE
\par VISB        BS        46.27012        -0.96000                       200.00000
\par FDID        BS         6.57143                                            NONE
\par TOCF        BS         6.23986                                            NONE
\par VGFO        BS         6.47782                                            NONE
\par VRFO        BS        37.01610                                       200.00000
\par VNCF        LL                                                            NONE       -52.94118
\par SRFO        LL                                                            NONE        -7.16181
\par LRFO        LL                                                            NONE        -3.13090
\par VGID        LL                                                       200.00000       -29.97525}{\f11\fs16 
\par }\page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}integer-solution-file-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Integer-Solution-File-Example}K
{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Example of Integer Solution}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}8}}{\f11 Example of an Integer-SOLUTION (Extension *.INT)
\par 
\par INTEGER SOLUTION
\par 
\par CFMA                        28.81977          0.00000
\par CFXR                         6.18024          0.00000
\par CREP                         0.00000        150.00000
\par CRNU                        27.00000          0.00000
\par DIST                       173.00000        -32.27716
\par FDFO                        39.00000       -105.00000
\par FDID                         6.00000          0.00000
\par FDSU                         0.00000        105.00000
\par FOMA                        95.00000          0.00000
\par FOXR                        20.00000          0.00000
\par FREP                         0.00000          0.00000
\par GOSU                         0.00000        105.00000
\par HVU                         90.00000          0.00000
\par IDMA                        44.55400          0.00000
\par IDXR                         1.44600          0.00000
\par IREP                         0.00000        105.00000
\par LRFO                         0.75889          0.00000
\par LRSU                         0.06611          0.00000
\par NACF                        22.69556          0.00000
\par NAGA                         0.00000         17.64706
\par NASU                         1.80124          0.00000
\par OBJF                      -247.35051          0.00000
\par OHSU                         0.00000        140.97647
\par SGFO                        13.00000          0.00000
\par SGID                        38.55400          0.00000
\par SPLT                        30.62100          0.00000
\par SRFO                         0.00000          0.00000
\par SRSU                         0.00000          0.00000
\par SUGA                         0.76620          0.00000
\par TOCF                         6.12420          0.00000
\par TOSU                         0.00000        705.88232
\par VGFO                         6.24111          0.00000
\par VGID                         0.00000       -105.00000
\par VGSU                         0.05889          0.00000
\par VIGA                         0.00000          0.00000
\par VISB                        45.00000          0.00000
\par VNCF                         0.00000         52.94118
\par VNSU                         2.70000          0.00000
\par VRFO                        36.00000          0.00000
\par VRSU                         0.00000          0.00000
\par 
\par Explanation
\par }\pard \fi720\widctlpar {\f11 1. Column Vector
\par 2. Column Value of the best Solution found
\par 3. Column Dj of the best solution found
\par }\pard \li720\widctlpar {\f11 4. If Vector is an integer Variable then follows the Charcter I
\par }\pard \widctlpar \page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}command-file-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Command File Example}K
{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Command;Batch;Example}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}9}}{\f11 Example of a Command file (Extension *.CMD)
\par 
\par LOADMATRIX REFEX
\par LOADBASIS REFEX
\par MAXTIME 600
\par MAXITER 30000
\par DJ-MIN -1E-3
\par MAXIMISE
\par SAVEBASIS
\par GLOBAL
\par SAVEINTEGER
\par QUIT
\par }\page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}integer-search}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Integer-Search}k{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Integer-Search;Branch and Bound;Node Selection Problem;Bound Selection Problem}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}10}}{\f11 Integer-Search
\par 
\par If a problem contains integer variables there are 3 possibilities:
\par 
\par {\pntext\pard\plain\f11\fs20 1.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\f11 Continuous problem is infeasible: No integer search required.
\par {\pntext\pard\plain\f11\fs20 2.\tab}Continuous problem is unbounded: Integer search necessary
\par {\pntext\pard\plain\f11\fs20 3.\tab}Continuous problem is optimal  : Integer search necessary
\par }\pard \widctlpar {\f11 
\par The procedure during integer search is as follows:
\par 
\par START
\par take the continuous solution and test for integer feasibility of the specified variables.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 Yes: Solution found. Store }{\strike\f11 OBJF}{\v\f11 objf}{\f11  as new cut-off-value. Store values and }{
\strike\f11 DJ}{\v\f11 dj}{\f11  of all variables.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}NO : Select an integer variable which violates the integer condition and start a branch and bound process:
\par }\pard \widctlpar {\f11 
\par }\pard \li720\widctlpar {\f11 Example: The variable A has in the continuous solution the value 2.5 Create two new problems with the following new }{\strike\f11 BOUNDS}{\v\f11 bounds}{\f11  A<=2 and A>=3 Solve the two problems and go to START
\par }\pard \widctlpar {\f11 
\par }{\b\f11 CUT-OFF}{\f11 : If during integer search a node is infeasible this node can be excluded from further search process as the addition of a new constraint can never make an infeasible problem feasible.
\par 
\par Additionally the search process can be stopped at a node whose OBJF is worse that the up to now best found solution.
\par 
\par Example for integer-search for a maximisation problem:
\par }\pard \li720\widctlpar {\f11 Continuos solution OBJF 100 lower limit initialised to -1e30 (means that every integer solution is
\par better than this value) IF you find a solution with for example OBJF=60 then from that point in time you can cut all nodes with a OBJF worse than 60. Furthermore you can drop all waiting nodes with a worse OBJF.
\par }\pard \widctlpar {\f11 
\par }{\b\f11 Variable-Select-Problem}{\f11 
: If you have in your continuous problem more than one variable which violates the integer condition you can choose the one or the other for the branch and bound process. You should select the variable which gives by branching the maximum deterioration in
 OBJF. But how can you know which variable gives that maximum ?
\par 
\par Exactly that is crucial for high efficiency in integer search.
\par A solution for this problem are }{\b\f11 pseudo-costs}{\f11 
. From branching that variable in an earlier stage you know the difference in OBJF you achieved by branching in this variable. Then you divide that difference by the distance to integer value. This quotient is a measure for the importance of that variable
 in the search process.
\par }{\b\f11 Example:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 OBJF of father 100, value of variable A 4.2
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}OBJF of son A<4 was 90 pseudocost down=(100-90)/(4.2-4)=50 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}OBJF of son A>5 was 95 pseudocost up  =(100-95)/(5-4.2)= 6.25
\par }\pard \widctlpar {\f11 
\par For a more detailed view I refer to the literature:
\par 
\par Investigation of some branch and bound strategies for the solution of mixed integer linear programs
\par }\pard \fi720\widctlpar {\f11 G. Mitra, Math. Progr. 4, (1973), 155-170
\par }\pard \widctlpar {\f11 
\par Experiments in mixed-integer linear programming
\par }\pard \li720\widctlpar {\f11 M. Benichou, J. M. Gauthier, P. Girodet, G. Hentges, G. Ribiere and O. Vincent, Math. Progr. 1, (1971), 76-94
\par }\pard \widctlpar {\f11 
\par }{\b\f11 Bound select problem:}{\f11  From my experience I propose to select the branch with the better OBJF first.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}inversion}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Inversion}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Inversion}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}11}}{\f11 Inversion-Routine of the optimiser
\par 
\par The inversion of the basis is sometimes necessary because:
\par 1. Accumulation of round-off errors
\par {\pntext\pard\plain\f11 2. \tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\pndec\pnb0\pni0\pnf11\pnfs24\pnstart2\pnindent283\pnhang{\pntxta . }}{\f11 The }{\strike\f11 Basis}{\v\f11 basis}{\f11  tends to fill in:
\par }\pard \li720\widctlpar {\f11 That means the following: The matrix is internally stored in a }{\strike\f11 compact format}{\v\f11 compact-storage}{\f11 
: Only the elements<>0 are stored. During the inversion the rows (of the complete matrix) and columns (of the basis) are reordered that mainly a L-Matrix is achieved.
\par }\pard \widctlpar {\f11 
\par    ( X                          )
\par    ( X X                        )
\par    ( X X X A A A A              )
\par    ( X X X X A A A              )
\par    ( X X X X X A A              )
\par    ( X X X X X X A              )
\par    ( X X X X X X X              )
\par    ( X X X X X X X X            )
\par    ( X X X X X X X X X          )
\par    ( X X X X X X X X X 1        )
\par    ( X X X X X X X X X    1     )
\par    ( X X X X X X X X X      1   )
\par    ( X X X X X X X X X        1 )
\par          a       b     c
\par 
\par It is always possible to achieve such a structure. But unfortunately it is in the most cases not possible to avoid completely the entries above the main diagonal(A).
\par 
\par }{\b\f11 Literature: }{\f11 (H. M. Markowitz, Management Science 3, No. 3, 255-269 (1957).)
\par 
\par From this representation of the inverse one can write immediately the inverse:
\par {\pntext\pard\plain\f11\fs20 1.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\f11 Step: From column 1 to a-1 create straight }{\strike\f11 Etha-Vector}{\v\f11 etha-vector}{\f11 
\par {\pntext\pard\plain\f11\fs20 2.\tab}Step: From b down to a apply the following procedure: Calculate the column (ftran) with all etha vectors created in 
the second step: then create from this updated column an etha-vector. When you are at position 'a' the matrix is now completely L-structured. Then start at column 'a' and end at column 'b' with the following strategy: Update the column with all etha-vecto
rs created in step 2. create an etha vector from this vector.
\par {\pntext\pard\plain\f11\fs20 3.\tab}Step:From column b+1 to c-1 create etha-vectors like in step 1
\par {\pntext\pard\plain\f11\fs20 4.\tab}Step: from column c to end of basis the vectors have only a single entry. If this entry <>1 then create a pivot element from it otherwise skip this vector.
\par }\pard \widctlpar {\f11 
\par Additionally one can try to rearrange the square piece of the matrix (A). This square is characterised that every row and every column has inside of this square at least 2 entries. But sometimes it is possible to split the large square in 2 ore more small
 squares (Partitioning)
\par }{\b\f11 Literature:}{\f11  E. Hellermann, D. Rarick, Math. Progr. 1, 195-216 (1971).
\par 
\par 
\par XX     This small 6*6 matrix has 3 so called Bumps: the small corners
\par XX     which are above the diagonal. By using this kind of sorting
\par XXXX   you get much lower fill ins than in the unsorted case
\par XXXX
\par XXXXXX
\par XXXXXX
\par 
\par During the iteration you add etha-vectors to the so called 'etha-file' (Because this etha-vectors were filed in earlier computers)    which need memory space. Additionally, if you update columns with this grown etha-file the vectors tend to fill in also. 
This increases memory requirements for the storage of the etha-vectors but much worse it also increases the effort necessary through the column updating.
\par 
\par At a certain p
oint in time is better to spend some time with inversion and then have a faster column updating and pricing than not to invert and have larger time for updating. As a rule of thumb the optimiser should spend about 1/3 of its time with inversion. From my e
xperience this rule gives fastest optimisation.
\par }\page {\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}etha-vector}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Etha Vector}k{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super k}Etha-Vector;Literature;Bump}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}12}}{\f11 ETHA-Vector
\par 
\par You call an etha vector a square matrix with the following structure: this kind of matrices are created through the }{\strike\f11 LR-decomposition}{\v\f11 lr-decomposition}{\f11  of square matrices (Basis) or through column exchange during pivoting.

\par 
\par p=Pivot-Element
\par x=entry of the column in the Matrix
\par     ( 1            -x/p             ) 
\par     (     1        -x/p             ) 
\par     (         1    -x/p             )
\par eta=(            1 -x/p             )
\par     (               1/p             )  Pivot-row
\par     (              -x/p  1          )
\par s    (              -x/p      1      )
\par     (              -x/p          1  )
\par 
\par As the matrix contains outside one column and the main diagonal only blanks and the one columns may have blanks as well it makes also  sense, to store the etha-vector in a compact format.
\par 
\par You needn't so store the matrix: It is only necessary to store the  nonzero entries of the pivot column and to store the pivot row. Additionally it is not necessary to perform the 'expensive' division.
\par It is faster to perform the division only once during the pricing and the column updating procedure.
\par 
\par }{\b\f11 Literature:}{\f11  J. J. H. Forrest and J. A. Tomlin, Math. Prog. 2, 263-278 (1972)
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}epsilon-perturbation}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Epsilon Perturbation}k{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Epsilon Perturbation}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}13}}{\f11 Epsilon Perturbation
\par 
\par The most matrices consist of }{\strike\f11 RHS}{\v\f11 rhs}{\f11  with most zero entries. That leads to many }{\strike\f11 iterations}{\v\f11 iteration}{\f11 , which don't improve the objective function }{\strike\f11 obj}{\v\f11 objf}{\f11 
. With that perturbation a vector is added to the }{\strike\f11 RHS}{\v\f11 rhs}{\f11  column to remove this behaviour. Unfortunately the number of infeasibilities at the beginning of the iteration is in the most cases equal to the numbe
r of rows of the problem. Hence you must perform at least nrow iterations to get a feasible basis. On top of that you have to continue optimising. But the perturbation gives an increase in numerical stability. After finishing the iteration the perturbatio
n has to be removed which leads to some additional iterations.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}compact-storage}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Compact Storage}k{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Compact Storage}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}14}}{\f11 Compact Storage
\par 
\par The matrix is internally stored in a compact format:
\par Only the row number (2 byte(4 Byte in Delphi-version)) and the number is stored (8 Bytes)
\par 10(12) bytes total for a single matrix entry
\par 
\par As LP-matrices are often very sparse you have two advantages of this storage:
\par 1. less memory for the matrix
\par {\pntext\pard\plain\f11\fs20 2. \tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\pndec\pnb0\pni0\pnf11\pnfs20\pnstart2\pnindent283\pnhang{\pntxta . }}{\f11 Gain in speed, because you have only to compute with numbers <>0
\par }\pard \widctlpar {\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}basis}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Basis}K{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Basis}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}15}}{\f11 Basis
\par 
\par For a n*n matrix you call a basis a set of n linear independent vectors For LP you add the status of non basis variables (whether on upper or lower bound)
\par 
\par The basis contains all information about the current status of the iteration. That's the reason for the use of a starting basis from a previous optimisation to speed up the optimisation
\par 
\par A basis is called a feasible basis, if all variables are within their bounds. 
\par A basis is called an optimal basis if it is a feasible basis and there are no more columns with a negative }{\strike\f11 DJ}{\v\f11 dj}{\f11 
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}dj}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}DJ}K{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {
\cs18\super K}DJ}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}16}}{\f11 DJ
\par 
\par The DJ is a number which gives the improvement of the }{\strike\f11 OBJF}{\v\f11 objf}{\f11 , if the value of a non basis variable is moved by one away from its bound (into the }{\strike\f11 basis}{\v\f11 basis}{\f11 )
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}objf}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Objective Function}k{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super k}Objective Function}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}17}}{\f11 OBJECTIVE-FUNCTION
\par 
\par OBJECTIVE-FUNCTION is the name of a row in the matrix which contains the entry for the price coefficients. It is a row without a limit and therefore type 'N'. In a lp-problem at least one N-ROW is required.\page }{\cs18\f11\super #{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}parameter}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Parameter}k{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}
 Parameter;iterlog;logfile;pricing;such-tiefe;relativ;basis_intervall;DJ-min;maxiter; MAX-TIME; LO_LIMIT; UP_LIMIT; TIGHT; ASSESS-PSE; RESTART; PSE; STRAT-1; STRAT-2}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}18}}{\f11 
PARAMETER
\par }\pard \fi-2835\li2835\widctlpar\tx1701\tx2835 {\f11 
\par Para.\tab Typical\tab Explanation
\par 
\par ITERLOG\tab 0\tab Number of Iterations, which are written on top of each other until a line feed is printed. A value of 0 gives a line only after inversion. During Integer search no output after an inversion.
\par LOGFILE\tab Y\tab During the iteration process the progress is logged in the file LP.LOG
\par PRICING\tab 16000     maximal Number of negative _DJ\rquote s_904 for the partial pricing procedure.
\par SUCH-TIEFE 6\tab 
When performing branch and bound one can either follow each node until infeasible of cutoff or one can stop the search after a certain number of nodes. IF you follow each node to its end, it is possible that you perform a lot of calculations 
and produce waiting nodes which will be cutoff anyway during optimization. You can overcome this problem by stopping the search after maybe 6 nodes and then continue with the waiting node 
with the best objf. It depends on the model, where to set this parameter.
\par RELATIV\tab 
0.98     IF a vector is a potential candidate for entering the basis, the DJ of this vector must have at least the value of relative*average DJ of the last 10 iterations The higher this parameter is the less iterations are necessary (normally, but
 is some cases it can be useful to reduce this parameter to, say, 16) By playing with this parameter there is a rule of thumb: The higher the parameter the less number of Iterations and the more effort for pricing.
\par BASIS_INTERVALL 0\tab Every n iterations the current basis is saved. 0 means: No basis save at all
\par DJ_MIN\tab -1E-6\tab All DJ's greater than DJ_MIN are treated as 0
\par MAXITER\tab 2E9\tab Maximal number of iterations. If this number is passed the optimiser stops with the message too many iterations
\par MAX-TIME\tab 1E9\tab Maximal time in seconds
\par LO_LIMIT\tab -1E30\tab During integer search this is the lower limit within a integer solutions is searched.
\par UP_LIMIT\tab 1E30\tab During integer search this is the upper limit within a integer solutions is searched.
\par TIGHT\tab N\tab 
IF the option is chosen, I try to tight the Integerproblem before starting the branch and bound process. This "can" save time but has to be considered with care. This calculation can on models with dense matrices last for a long time and may need 
more time then the potential savings. IF the matrix is changed during this process, I write a }{\strike\f11 compression file}{\v\f11 compression}{\f11  *.CMP which contains a listing of the changes
\par ASSESS-PSE\tab Y\tab If during integer search you can branch on a vector for which no pseudo-cost exists, the program tries to estimate this pseudo-cost.
\par RESTART\tab Y\tab 
During integer search all vectors get a pseudo cost. IF for a specific vector no such cost was known from previous search it gets in the screen output in column pseudo a plus character '+'. If the number of such vectors increases a certain thres
hold the integer search is restarted with the new pseudo costs. This action may reduce the solution time for hard problems significantly.
\par PSE\tab Y\tab Use pseudocosts in branch and bound
\par STRAT-1\tab 0\tab During Integer search for each waiting node which is subject to branch and bound a counter is increased until 100 and reset to 0. If this counter is below strat-1 then the node with a maximum number of fixed variables is chosen.
\par STRAT-2\tab 90\tab If this counter is below strat-2 then the node with a minimum number of fixed variables is chosen.
\par DRUCKER\tab NEC\tab Printer which is used for different printouts.
\par DESTINATION LPT1\tab Port, to which toe printer is connected.
\par FORMAT LANDSCAPE\tab Portrait or Landscape (only for laserprinter)
\par PITCH\tab 20\tab Characters per Inch
\par RAND            0\tab Left borderin characters
\par LINES-PER-PAGE 89\tab Number of lines per page
\par }\pard \widctlpar {\f11 LINES-PER-INCH 8\tab Number of lines per Inch}{\cs18\f11\super \page #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}infeasibility}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {
\cs18\super $}Infeasibilty}k{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Infeasibility}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}19}}{\f11 INFEASIBILITIES
\par 
\par A model is called 'INFEASIBLE' if it contains restrictions which contradict each other e.g.
\par 
\par a>5
\par a<4
\par 
\par It is clear that for all values of 'a' at least one of these constraints is violated.
\par 
\par During the optimisation process it may happen, that some variables have a value outside their }{\strike\f11 bounds}{\v\f11 bounds}{\f11  . The program sees that and tries to move the value between the bounds. I use the following strategy to reach that:

\par 
\par {\pntext\pard\plain\f11\fs20 1.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}{\f11 value is above the upper bound
\par }\pard \li720\widctlpar {\f11 
The value has to get lower.this is achieved by assigning a very high negative number as OBJF coefficient. during the optimisation it is checked whether the value is now in the allowed range. If the check is OK, the original value of the OBJF is restored a
nd an infeasibility is removed.
\par }\pard \widctlpar {\f11 
\par 2. value is below lower bound
\par }\pard \li720\widctlpar {\f11 
If a upper bound exists, the procedure is similar to the above mentioned case only with other sign of the OBJF. entry. However, if the upper bound is at its maximum possible value of 1E30, you have a problem. The procedure must be revised as follows:

\par }\pard \widctlpar {\f11 
\par }\pard \li720\widctlpar {\f11 
You assign a upper bound of the lower bound. The variable is now forced to reach the upper bound. If the variable has this value, the variable is set to lower bound, and the upper bound is removed. Also the OBJF-entry is restored.
\par }\pard \widctlpar {\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}rhs}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}RHS Right-Hand-Side}k{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}rhs, right-hand-side}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}20}}{\f11 RHS (Right Hand Side)
\par 
\par This is the name for the columns of the matrix, in which the value of the constraints are stored.
\par 
\par Example : X+3*Y<6   The RHS of this row is 6.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}problem}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Problem Definition}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Problem Definition}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}21}}{\f11 ROBLEM
\par 
\par In this screen some properties of the read matrix are specified: }{\strike\f11 OBJF}{\v\f11 objf}{\f11  means the name of the }{\strike\f11 N-type}{\v\f11 row-type}{\f11 
 row, which shall be used for optimising If not specified the optimiser takes the first N-row it sees through reading.
\par 
\par }{\strike\f11 BOUND}{\v\f11 bounds}{\f11  defines the name of the bound for the desired problem. If not specified the optimiser takes the first bounds-set it sees through reading.
\par 
\par Same for }{\strike\f11 RHS}{\v\f11 rhs}{\f11  and }{\strike\f11 RANGE}{\v\f11 ranges}{\f11 
\par 
\par see also }{\strike\f11 MPSX-Format}{\v\f11 mpsx-format-in}{\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}files-used-and-created}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {
\cs18\super $}Files used and created}k{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Files}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}22}}{\f11 Files used and created
\par 
\par This LP-Solver uses the following files:
\par 
\par LP.EXE\tab Executable
\par LP.PAR\tab }{\strike\f11 Parameters}{\v\f11 parameter}{\f11  used for configuration
\par LP.HLP\tab The file you are currently reading
\par 
\par IF you are using a matrix name then the program creates some other files. The extensions and their meaning are as follows:
\par 
\par MAT\tab Matrix in columnwise }{\strike\f11 MPSX-Format}{\v\f11 mpsx-format-in}{\f11 
\par LP\tab Matrix in            }{\strike\f123 Row-wise format}{\v\f11 row-wise-in}{\f11 
\par BSS\tab Basis  in my format  }{\strike\f11 Basis file}{\v\f11 basis}{\f11 
\par 
\par CMP\tab }{\strike\f11 Compression}{\v\f11 compression}{\f11 
\par LOS\tab }{\strike\f11 Solution file}{\v\f11 solution-file-example}{\f11 
\par INT   }{\strike\f11 Integer solution file}{\v\f11 integer-solution-file-example}{\f11 
\par INF\tab IF the matrix is infeasible then this file contains all
\par       }{\strike\f11 infeasible vectors}{\v\f11 infeasible-file}{\f11 
\par 
\par If you save a }{\strike\f11 integer-search}{\f11 -tree, 4 files are created:
\par INF\tab Information about current status
\par BOU\tab Bounds used (}{\strike\f11 Binary-File}{\v\f11 binary-file}{\f11 )
\par FIL\tab Information about the }{\strike\f11 nodes}{\v\f11 nodes}{\f11  (active or already solved)
\par }\pard \li720\widctlpar {\f11 bounds used basis for the node ... (Binary file)
\par }\pard \widctlpar {\f11 WAI\tab List of all nodes sorted after objf (Binary file)
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}compression}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Compression}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Compression;TIGHT}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}23}}{\f11 Compression
\par IF parameter }{\strike\f11 TIGHT}{\v\f11 parameter}{\f11  is set on yes after reading of the matrix a file is created which contains a listing of the actions performed
\par during compression.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 Remove Entries with coefficient of zero 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Replace a row with only one element by a bound on this vector
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Remove all entries of Vectors with a fixed bound from the matrix and modify RHS accordingly 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}Set Bound on Integervariables to integer value: 
\par }\pard \li720\widctlpar {\f11 UP 3.5  --> 3
\par LO 2.5  --> 3
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 Calculate bounds on variables from rows and rhs entries.
\par }\pard \widctlpar {\f11 
\par This is done until no more modifications are possible.
\par 
\par }{\strike\f11 Example of compression file}{\v\f11 example-compression}{\f11 
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}example-compression}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Compression File}n{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}24}}{\f11 Example of Compression File
\par 
\par IN COLUMN x_____16   Entry at row GL44       was 0
\par REPLACE ROW BK10       By a UP Bound on Column VBA        0.7
\par REPLACE ROW R1____25   By a LO Bound on Column x_____25   38
\par REPLACE UP Bound on Column VBI from 7.9 by 7
\par COLUMN VBH has a fixed bound of 0
\par PA LO BOUND changed from 0 to 7
\par PW UP BOUND changed from 1E21 to 7.59398E18
\par COLUMN VBIH has a fixed bound of 0\page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}compiler}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Compiler}K{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Compiler}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}25}}{\f11 Compiler
\par The DOS-DPMI-Version of this Program was compiled with BORLAND PASCAL Version 7.0.
\par The WINDOWS 95, 98, NT-Version of this Program was compiled with BORLAND DELPHI Version 4.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}ranges}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Ranges}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Range}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}26}}{\f11 RANGES
\par 
\par A range is a possibility to enter two rows with equal coefficients but different }{\strike\f11 RHS}{\v\f11 rhs}{\f11  as one row. This saves matrix size.
\par 
\par Example : X+3*Y<6   The RHS if this constraint is 6.
\par           X+3*Y>2   The RHS if this constraint is 2.
\par 
\par These two rows may be formulated as:
\par 
\par            X+3*Y>2   &   Range=4
\par or         X+3*Y<6   &   Range=4
\par 
\par This kind or formulation creates inside the optimiser a slackvariable with an upper bound.\page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}bounds}${\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super $}Bounds}k{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Bounds}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}27}}{\f11 Bounds
\par 
\par If a problem contains restriction with a single column, one can store this restriction outside the matrix and save a row and a slack or artificial (increase in performance)
\par 
\par Example:
\par 
\par A<3\tab \tab \tab \tab --> upper Bound 3               UP
\par A>2\tab \tab \tab \tab --> lower Bound 2               LO
\par A=2.5\tab \tab \tab \tab --> fixed Bound 2.5             FX
\par A>-1e30 & A<1e30\tab \tab --> free  Bound                 FR
\par 0 or 1\tab \tab \tab --> Binary                      BV
\par INTEGER\tab \tab \tab --> Integer with an upper bound UI
\par 0 or >=1\tab \tab \tab --> Semi continuous             SC
\par Special ordered Set\tab -->                             S1 }{\strike\f11 SOS}{\v\f11 sets}{\f11 
\par Special ordered Set\tab -->                             S2 }{\strike\f11 SOS}{\v\f11 sets}{\f11 
\par 
\par The bounds for a variable are not limited. For example a variable may have a lower bound of -5 and an upper bound of -1, or two different signs. But the lower bound must be below the upper bound.
\par 
\par If you have free variables in the matrix you can encounter the follow
ing problem: If such a variable is in the non-basis part of the matrix it has to be on its bounds. But a bound of -1e30 causes severe numerical problems with round-off errors. Therefore the lower bound is set to 0 and I try to move this column into the ba
sis by pivoting. If it is once in the basis the bounds are set to -1e30 and 1e30 and they can't leave the basis anymore.
\par 
\par During the }{\strike\f11 crash}{\v\f11 crash}{\f11  procedure I try to move all free columns into the basis.\page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}sets}${\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Special ordered sets}k{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}SOS-1;SOS-2}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}28}}{\f11 
SOS Special ordered Sets Type 1 or 2
\par 
\par A special ordered set-1 means the following: A number of binary variables, of which exactly one is equal 1 and all others are zero.
\par Typical application is in scheduling, when only one plant out of two is running or in planning if you start a project in week one or week two but not in both weeks.
\par 
\par A special ordered set-2 means the following: A set of variables with a sum of one. at least one and at most two variables have a value of nonzero. If two variables are nonzero then they have to be neighbours of each other. 
\par 
\par Typical application is the modelling of non-linear operating lines   (piecewise linear)
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}About}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $} About} K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}About}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}29}}{\f11 ABOUT
\par This program was written by
\par 
\par Markus Weidenauer
\par Im Blauen Garn 65
\par 50389 Wesseling
\par Germany
\par 
\par Tel.: +49 2236 840282
\par 
\par email: nc-weidenma@netcologne.de
\par http://www.netcologne.de/~nc-weidenma/index.htm
\par 
\par If you use this program, send me a mail and tell me your experience. I am very interested in receiving comments on performance and stability of the optimiser. If you encounter problems with set-up or solving examples don't hesitate to contact me.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #} row-wise-in}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $} Row-wise-format}K{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Row-wise-Format}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}30}}{\f11  Row-wise Format
\par File name *.LP
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 A # at the begin  of a line means comment: The rest of the line will be ignored
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The length of a row is limited by 250 chars. Longer lines should be split.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The end of a row is defined by a semicolon ';'
\par }\pard \widctlpar {\f11 Row-wise formulation of the problem
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 1. row contains }{\strike\f11 Objective-Function}{\v\f11 objf}{\f11  and the direction of the Optimisation:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li1723\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 MAX:  A+3*b;   !OBJF    #
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li1003\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 2. ROW: Constraint
\par }\pard \li720\widctlpar {\f11      MAX_A:   A<5;
\par      MIN_SUM: a+b>3;
\par      DEMAND:  b=5;
\par    :ENDE
\par }\pard \widctlpar {\f11    Then possibly }{\strike\f11 BOUNDS}{\v\f11 bounds}{\f11 , }{\strike\f11 RANGES}{\v\f11 ranges}{\f11 , }{\strike\f11 Sets}{\v\f11 sets}{\f11  Syntax same as MPSX Format
\par    ENDATA
\par 
\par The naming convention is according to programming languages:
\par 1. Character is a letter from the following set ['A'..'Z','a'..'z','_'], the following characters are any of ['A'..'Z','a'..'z','_','0'..'9']
\par The length of a name is limited to 25 chars.
\par 
\par }{\strike\f11 Example}{\v\f11 row-wise-example}{\f11 
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}mpsx-format-in}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}MPSX Format}k{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super k}MPSX; Column-wise}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}31}}{\f11 MPSX Format
\par 
\par NAME          ---------
\par ROWS
\par  N  ---------
\par  G  ---------
\par  L  ---------
\par  E  ---------
\par COLUMNS
\par     ----------//////////------------   ----------///////////
\par RHS
\par     ----------//////////------------   ----------///////////
\par BOUNDS
\par  -- ----------//////////------------   if up, lo, fx, ui, li, mi, sc
\par  -- ----------//////////               ----------   if s1 or s2
\par RANGES
\par     ----------//////////------------   ----------///////////
\par ENDATA
\par 
\par There is the additional condition that variable names should not contain spaces. There is no condition for the ordering of the columns is the column section. They may be in mixed order. The standard MPSX formats doesn't
\par allow the following notation:
\par    COLUMNS
\par        A           R1            5
\par        B           R1            5
\par        A           R2            3
\par        B           R2            -1
\par 
\par    The following MPSX codes are supplied:
\par    ROWS,  COLUMNS
\par    RHS,   }{\strike\f11 BOUNDS}{\v\f11 bounds}{\f11  }{\strike\f11 RANGES}{\v\f11 ranges}{\f11  SETS0910
\par 
\par In the COLUMNS or RHS Section as many entries are allowed which fit into one line (255 chars)
\par    COLUMNS
\par     X R1 5 R2 10 R4 10 R6 10 OBJF 10 ...
\par 
\par    In the }{\strike\f11 BOUNDS}{\v\f11 bounds}{\f11  section the following codes are allowed:
\par    FIX   (FX)   -->   Var =Value
\par    LOWER (LO)   -->   Var>=Value
\par    UPPER (UP)   -->   Var<=Value
\par    FREE  (FR)   --> -1E20<=value<1E20
\par 
\par When Integer Programming is wanted there are some other bound types:
\par 
\par Description\tab \tab BOUND\tab Explanation
\par Binary\tab \tab \tab BV\tab \tab 0 or 1
\par INTEGER\tab \tab \tab UI\tab \tab Integer with an upper bound
\par Semi continuous\tab SC\tab \tab 0 or >=1
\par Special ordered Set\tab S1\tab \tab }{\strike\f11 SOS-1}{\v\f11 sets}{\f11 
\par Special ordered Set\tab S2\tab \tab }{\strike\f11 SOS-2}{\v\f11 sets}{\f11 
\par 
\par The bounds for a variable are not limited. For example a variable may have a lower bound of -5 and an upper bound of -1, or two different signs. But the lower bound must be below the upper bound.
\par }{\strike\f11 Example}{\v\f11 mpsx-example}{\f11 
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}row-wise-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Row-wise Example}k{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Example row-wise-format}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}32}}{\f11 Example of a matrix in LP-Format (Extension *.LP)
\par 
\par REFEX.LP
\par 
\par MAX: +150*CFMA-88.52*DIST+70*FOMA-0.45*HVU+105*IDMA-0.2*SPLT-0.96*VISB;
\par CREP: +CFMA-NACF-TOCF-VNCF=0;
\par FDSU: +FDFO+FDID-0.5*HVU<0;
\par FREP: -FDFO+FOMA-LRFO-SGFO-SRFO-VGFO-VRFO=0;
\par GOSU: -0.298*DIST+SGFO+SGID<0;
\par IREP: -FDID+IDMA-SGID-VGID=0;
\par LRSU: -0.525*DIST+HVU+LRFO<0;
\par NAGA: +8.5*NACF-31.5*TOCF+11.5*VNCF<0;
\par NASU: +NACF-0.8*SPLT<0;
\par VRSU: -0.8*VISB+VRFO<0;
\par OHSU: -0.177*DIST+SPLT<0;
\par SRSU: -0.5*HVU+SRFO+VISB<0;
\par SUGA: +1.8*FDID-0.3*SGID+2*VGID<0;
\par TOSU: -0.2*SPLT+TOCF<0;
\par VGSU: +VGFO+VGID-0.14*VISB<0;
\par VIGA: -1.9*FDFO+6.6*LRFO-20.6*SGFO+15.1*SRFO-18.7*VGFO+12.6*VRFO<0;
\par VNSU: -0.06*VISB+VNCF<0;
\par :ENDE
\par BOUNDS
\par  UP BOUND     CFMA          35.00000
\par  UI BOUND     DIST         200.00000
\par  UI BOUND     FDFO         200.00000
\par  UI BOUND     FOMA         115.00000
\par  UI BOUND     HVU          200.00000
\par  UP BOUND     IDMA          46.00000
\par  UI BOUND     SGFO         200.00000
\par  UI BOUND     VGID         200.00000
\par  UI BOUND     VISB         200.00000
\par  UI BOUND     VRFO         200.00000
\par ENDATA
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}mpsx-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}MPSX Example}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}MPSX-Example}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}33}}{\f11 Example of a matrix in MPSX-Format (Extension *.MAT)
\par 
\par NAME          REFEX
\par ROWS
\par  N  OBJF
\par  E  CREP
\par  L  CRNU
\par  L  FDSU
\par  L  FOXR
\par  E  FREP
\par  L  GOSU
\par  L  IDXR
\par  E  IREP
\par  L  LRSU
\par  L  NAGA
\par  L  NASU
\par  L  VRSU
\par  L  OHSU
\par  L  SRSU
\par  L  SUGA
\par  L  TOSU
\par  L  VGSU
\par  L  VIGA
\par  L  VNSU
\par  L  CFXR
\par COLUMNS
\par     CFMA      OBJF         150.00000   CREP       1.00000
\par     CFMA      CFXR           1.00000
\par     DIST      OBJF         -88.52000   OHSU      -0.17700
\par     DIST      GOSU          -0.29800   LRSU      -0.52500
\par     DIST      CRNU           1.00000
\par     FDFO      FREP          -1.00000   FDSU       1.00000
\par     FDFO      VIGA          -1.90000
\par     FDID      IREP          -1.00000   FDSU       1.00000
\par     FDID      SUGA           1.80000
\par     FOMA      OBJF          70.00000   FREP       1.00000
\par     FOMA      FOXR           1.00000
\par     HVU       OBJF          -0.45000   FDSU      -0.50000
\par     HVU       SRSU          -0.50000   LRSU       1.00000
\par     IDMA      OBJF         105.00000   IREP       1.00000
\par     IDMA      IDXR           1.00000
\par     LRFO      FREP          -1.00000   LRSU       1.00000
\par     LRFO      VIGA           6.60000
\par     NACF      CREP          -1.00000   NASU       1.00000
\par     NACF      NAGA           8.50000
\par     SGFO      FREP          -1.00000   GOSU       1.00000
\par     SGFO      VIGA         -20.60000
\par     SGID      IREP          -1.00000   GOSU       1.00000
\par     SGID      SUGA          -0.30000
\par     SPLT      OBJF          -0.20000   OHSU       1.00000
\par     SPLT      TOSU          -0.20000   NASU      -0.80000
\par     SRFO      FREP          -1.00000   SRSU       1.00000
\par     SRFO      VIGA          15.10000
\par     TOCF      CREP          -1.00000   TOSU       1.00000
\par     TOCF      NAGA         -31.50000
\par     VGFO      FREP          -1.00000   VGSU       1.00000
\par     VGFO      VIGA         -18.70000
\par     VGID      IREP          -1.00000   VGSU       1.00000
\par     VGID      SUGA           2.00000
\par     VISB      OBJF          -0.96000   VNSU      -0.06000
\par     VISB      VGSU          -0.14000   VRSU      -0.80000
\par     VISB      SRSU           1.00000
\par     VNCF      CREP          -1.00000   VNSU       1.00000
\par     VNCF      NAGA          11.50000
\par     VRFO      FREP          -1.00000   VRSU       1.00000
\par     VRFO      VIGA          12.60000
\par RHS
\par     RHS       CFXR          35.00000   IDXR      46.00000
\par     RHS       CRNU         200.00000   FOXR      15.00000
\par BOUNDS
\par  UI BOUND     DIST         200.00000
\par  UI BOUND     FDFO         200.00000
\par  UI BOUND     FOMA         200.00000
\par  UI BOUND     HVU          200.00000
\par  UI BOUND     SGFO         200.00000
\par  UI BOUND     VGID         200.00000
\par  UI BOUND     VISB         200.00000
\par  UI BOUND     VRFO         200.00000
\par ENDATA
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}basis-format}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Basis-Format}k{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super k}Basis-Format}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}34}}{\f11 Basis
\par 
\par In the 1. line is the name of the matrix to which that basis belongs.
\par The last is ENDATA
\par In the other lines the 1. char is a space then follows:
\par X with a list of basisvectors
\par U with a list of nonbasisvectors at upper bound
\par   Vectors not mentioned are OBJF (always last Basis vector)
\par                         NON-basic at lower bound
\par }{\strike\f11 Example}{\v\f11 basis-example}{\f11 
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}basis-example}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Basis Example}k{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super k}Basis;OBJF;lower-bound}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}35}}{\f11 Example of a basis file  (Extension *.BSS)
\par (.MAT
\par  X DESUPMP X DESUPLP X HOT-OIX X GTNATGAS X GTHEL
\par  X GTBUTAN X T1B1 X F-5401B1 X STROMB2 X K7B1
\par  X K6B1 X K5B1 X K51 X K61 X K4B1
\par  X K4-PR-U X K71 X K3B1 X K31 X F-5401GREFU
\par  X F-5401-HP X FEEDPREP X DESUPHP X STROMB1 X COND
\par  X K3LREFU X T1-PR X T4_MP-U X T11 X WSBIN
\par  X SP-WA X GTS X K4LREFU X GT1 X K5GREFU
\par  X T34 X I-DE-P X T3B2 X K7LREFU X K7GREFU
\par  X T4_HP-U X WS-PR-U X I-HE-P X T31 X ABSP-MP
\par  X WSGREFU X K3GREFU X T2_COS X T3-PR X T4_PR-U
\par  X K6LREFU X T2_LP X K6GREFU X HEAT-E X T3B3
\par  X T2B X T33 X GT-STROM X K5LREFU X GTB1
\par  X K4GREFU X PR-B X HICO X WASSER X PVE-WASSER
\par  X PLREFU1 X PGREFU1 X MW1 X WS-MIN X WS-MA
\par  X T4 X T34 X T2-MIN X HICOCAP X T12
\par  X F-54011 X K71 X K61 X K51 X K41
\par  X K31 X STROM1_BI X MW-TOT X GTB2
\par  U F-5401B2
\par  U CONDB U PNATGAS1 U SSTROM2 U T1B2 U T1_PR-U U B_HEL U T2_HP U B_DESPWA
\par  U B_COND U B_BUTAN U T3B4 U T4B U _2
\par ENDATA
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}command}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Command}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Command; Batch}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}36}}{\f11 COMMAND-FILE
\par 
\par With a Command-File you can steer the optimise from command line or you can call the unit go_lp from another program of your own. This command file may contain many commands which allow nearly any option from the menu system to be called from a batch.

\par 
\par Allowed commands:
\par Define Problem
\par   OBJF   NAME            : Objective function NAME
\par   RHS    NAME            : Right Hand Side    NAME
\par   BOUND  NAME            : Bounds             NAME
\par   RANGE  NAME            : Range              NAME
\par 
\par Load
\par   LOADMATRIXFORMATTED    : Matrix *.MAT in }{\strike\f11 MPSXformat}{\v\f11 mpsx-formatted-in}{\f11  is read after a fileselect
\par   LOADMATRIX             : Matrix *.MAT in }{\strike\f11 MPSX}{\v\f11 mpsx-format-in}{\f11  Format is read after a fileselect
\par   LOADMATRIX NAME        : Matrix NAME.MAT in }{\strike\f11 MPSX}{\v\f11 mpsx-format-in}{\f11  is read
\par   LOADLP                 : Matrix *   .LP in LP Format is read after a fileselect
\par   LOADLP NAME            : Matrix NAME.LP  in LP Format is read
\par   LOADBASIS              : BASIS  *   .BSS Basis is read after a fileselect
\par   LOADBASIS NAME         : BASIS  NAME.BSS in Basis is read
\par 
\par Do anything
\par   MAXIMISE               : Start the optimisation direction max.
\par   MINIMISE               : Start the optimisation direction min
\par   GLOBAL                 : Start search for global Integerextremum
\par   INVERT                 : Force an inversion
\par 
\par Parameters
\par   MAXITER                : Maximum number of iterations
\par   MAXTIME                : Maximum time for computation (s)
\par   SUCH                   : Search-Depth for Integer search
\par   DJ-MIN                 : DJ-Limit
\par   CUTOFF VALUE           : Limits possible integer solution to
\par                            Continuous solution - Value
\par                            If value is not given then lo and up-limit of
\par                            the potential solutions are set to 1e30 and -1e30.
\par   LIMIT VALUE            : Limits possible integer solution to Value
\par                            If value is not given then lo and up-limit of
\par                            the potential solutions are set to 1e30 and -1e30.
\par Save
\par   SAVELP                 : Save matrix in LP-format
\par   SAVEMAT                : Save Matrix in MPSX-format
\par   SAVEXPRESS             : Save Matrix in XPRESS-format
\par   SAVESOLUTION           : Save Solution to File NAME.LOS
\par   SAVEINTEGER            : Save Integersolution as NAME.INT
\par 
\par OTHER
\par   EXIT                   : Leave command and go back to calling routine
\par   QUIT                   : Leave the optimiser and finish program
\par   TIGHT                  : Try to sqeeze unnecessary stuff out of the matrix
\par                            Explanation }{\strike\f11 Compression}{\v\f11 compression}{\f11 
\par   UNTIGHT                : deactivate the tight option
\par   LOG                    : Start logging
\par   UNLOG                  : Stop logging
\par   NEW                    : Remove matrix from memory
\par   }{\strike\f11 Example}{\v\f11 command-file-example}{\f11 
\par }{\v  mpsx-with-recursion}{\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}crash}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Crash}K{\footnote\ftnalt 
\pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}Crash; Basis}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}38}}{\f11 Crash
\par 
\par The easies way to create a numerically stable starting }{\strike\f11 basis}{\v\f11 basis}{\f11 
 is the use of only slacks and artificials. This basis is normally far from optimum. If you perform a crash you try to move as many structural vectors as possible into the basis and remain a l-matrix and stay not singular.\page }{\cs18\f11\super #
{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}nodes}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Nodes}K{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}
Nodes; Integer-Search}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}39}}{\f11 Nodes
\par 
\par A node is tightened derivative of the relaxed lp model you started with when entering integer search. It contains additional constraints to force a variable to an integer value which was noninteger at the previous iteration.\page }{\cs18\f11\super #
{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}mpsx-formatted-in}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}MPSX{\f11 -formatted-in}}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}MPSX; Fixed Column Width}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}40}}{\f11 MPSX formatted
\par 
\par This format uses the standard MPSX-Format. The differences to the format used by this program are:
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f11 The names of rows and columns may contain spaces
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}The length of the names are limited to 8 chars
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}per line only maximum two entries in the colum section allowed.
\par }\pard \widctlpar {\f11 
\par All other information is the same as in the }{\strike\f11 MPSX-format}{\v\f11 mpsx-format-in}{\f11 \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}lr-decomposition}${\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}LR-Decomposition}K{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K} LR-Decomposition; Inversion}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}41}
}{\f11 LR-Decomposition
\par 
\par This means the kind of }{\strike\f11 inversion}{\v\f11 inversion}{\f11  used by this optimiser
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}infeasible-file}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Infeasible-File}K{\footnote\ftnalt \pard\plain 
\s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}infeasible; Files}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}42}}{\f11 Infeasible File
\par This file is created if you ask for an integer solution file but the problem was infeasible. It contains a list of all }{\strike\f11 infeasible}{\v\f11 infeasibility}{\f11  vectors\page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super #}binary-file}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Binary-File}K{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super K}binary-File; Integer-Search; Nodes}n
{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}43}}{\f11 binary files
\par 
\par These files can not be viewed with a certain program. They are sometimes (if the search tree needs more memory than available to the system) created by the solver during }{\strike\f11 integer search}{\v\f11 integer-search}{\f11 
. They contain information about the bounds used, which variables are at their integer bounds, the basis of the different waiting nodes.
\par \page }{\cs18\f11\super #{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super #}row-type}${\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super $}Row-Type}K{\footnote\ftnalt \pard\plain \s17\widctlpar 
\f4\fs20\lang2057 {\cs18\super K}Row; N-Type, E-Type, G-Type, L-Type}n{\footnote\ftnalt \pard\plain \s17\widctlpar \f4\fs20\lang2057 {\cs18\super n}44}}{\f11 Row-Type
\par 
\par In the }{\strike\f11 MPSX-format}{\v\f11 mpsx-format-in}{\f11  you can define different types of constraints:
\par {\pntext\pard\plain\b\f1\fs20 \'b7\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\b\f11 N-Type}{\f11  Unlimited: The value of the row can be from -infinite to +infinite }{\f11\lang1024 
{\field{\*\fldinst SYMBOL 224 \\f "Wingdings" \\s 10}{\fldrslt\f17\fs20}}}{\f11  the bounds of the slack are not limited}{\b\f11 
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}E-Type }{\f11 Equation: The value of the row is fixed: The slack has a fixed bound of zero.
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 L-Type}{\f11 : The value of the row is less then a certain value
\par {\pntext\pard\plain\f1\fs20 \'b7\tab}}{\b\f11 G-Type}{\f11 : The value of the row is less then a certain value
\par }\pard \widctlpar {\f11 \page 
\par }}